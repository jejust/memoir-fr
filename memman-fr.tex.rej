--- memman.tex	2016-11-25 19:29:30.000000000 +0100
+++ memman.tex	2020-10-06 23:35:11.000000000 +0200
@@ -9,9 +9,12 @@
 %
 %\listfiles
 \documentclass[10pt,letterpaper,extrafontsizes]{memoir}
-\listfiles
 \usepackage{comment}
 
+\hfuzz=5pt
+
+%\setlength\overfullrule{5pt}
+
 
 % For (non-printing) notes  \PWnote{date}{text}
 \newcommand{\PWnote}[2]{} 
@@ -116,21 +119,52 @@
 
 
 
+
+
 %% end preamble
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %#% extend
 
+
+%\hfuzz=10pt
+
 \usepackage[draft]{fixme}
 \fxsetup{
-  layout=marginnote
+  multiuser,
+  marginface=\normalfont\tiny,
+  innerlayout=noinline,
+  layout=marginnote,
 }
- 
+\usepackage{tikz,ragged2e}
+\makeatletter
+% extra feature, vadj=length kan flytte på fxnotes hvis de overlapper
+\@fxdefinekey{layout}{vadj}{\def\marginnotevadjust{#1}}
 
-\begin{document}
+% endnu mere ekstra feature, kræver tikz og calc tikz lib
 
+\renewcommand*\FXLayoutMarginNote[3]{%
+  \tikz[overlay,remember picture]\coordinate (A) at (0,0);%
+  \marginnote[%
+    \RaggedLeft%
+    \rlap{\tikz[overlay,remember picture]\coordinate(C) at (0,0);}%
+    \@fxuseface{margin}%
+    \@fxtextstd{#1}{#2}{#3}%
+    {\tikz[overlay,remember picture,ultra thin,cyan]\draw(A) -| ++(0,-2pt) -|(C);}%
+  ]{%
+    \RaggedRight%
+    \tikz[overlay,remember picture]\coordinate(B) at (0,0);%
+    \@fxuseface{margin}%
+    \@fxtextstd{#1}{#2}{#3}%
+    \tikz[overlay,remember picture,ultra thin,cyan]\draw(A) -| ++(0,-2pt) -|(B);%
+  }%
+}
+\makeatother
 
 
 
+\begin{document}
+
+
 %#% extstart input intro.tex
 
 
@@ -1313,7 +1376,7 @@
 produced with \Mname\ 
 to meet a university's thesis layout requirements.
 
-    \Mname\ has improved substantially since it was first released ---
+The \Mname\  class has improved substantially since it was first released ---
 over 50 \ltx ers have provided code or suggestions for improvements.
 The class is included in the \TeXUG\ \tx\ distributions and the latest 
 version of the class and its supporting documentation is always
@@ -1332,16 +1395,16 @@
 
 \section{General considerations}
 
-    The class is a large one consisting of about 10,000 lines of \ltx\ code
-documented in a 400 page report; there is no need for most users to look at 
-this~\cite{MEMCODE}. However if you want to see exactly how some part, 
-or all of, \Mname\ is defined it is there for you to peruse.
-The document you are now reading is the separate comprehensive 
-User Manual~\cite{MEMMAN} which runs to about 500 pages, and from time to 
-time an Addendum %\cite{MEMADD} 
-is released noting extensions to the class.\footnote{Currently not in use.}
-Again, if you want to see how something was done in this Manual, which
-of course was prepared using \Mname\ itself, the source
+The class is a large one consisting of about 10,000 lines of \ltx\
+code documented in a 400 page report; there is no need for most users
+to look at this~\cite{MEMCODE}. However if you want to see exactly how
+some part, or all of, \Mname\ is defined it is there for you to
+peruse.  The document you are now reading is the separate
+comprehensive User Manual~\cite{MEMMAN} which runs to about 500 pages,
+and from time to time an Addendum %\cite{MEMADD}
+is released noting extensions to the class.\footnote{Currently not in
+  use.}  Again, if you want to see how something was done in this
+Manual, which of course was prepared using \Mname\ itself, the source
 is available for you to read.
 % There is also the \Lpack{memexsupp} package by Lars Madsen~\cite{MEMEXSUPP} 
 % which provides some extra facilities for the class.
@@ -1443,10 +1506,20 @@
 
 \section{Tables}
 
-    Code from the \Lpack{array}, \Lpack{dcolumn}, \Lpack{delarray} and
-\Lpack{tabularx} packges is integrated within the class. To improve
-the appearance of rules in tabular material the \Lpack{booktabs}
-package is also included.
+%    Code from the \Lpack{array}, \Lpack{dcolumn}, \Lpack{delarray} and
+%\Lpack{tabularx} packges is integrated within the class. To improve
+%the appearance of rules in tabular material the \Lpack{booktabs}
+%package is also included.
+
+The \Lpack{array}, \Lpack{dcolumn}, \Lpack{delarray}, \Lpack{tabularx}
+are automatically loaded by the class. In earlier days their code were
+embedded into the class, nowadays we just load the respective
+packages. To improve the appearance of rules in tabular material the
+\Lpack{booktabs} package is also included (as a code copy, this may
+change in the future).
+
+
+
 
     Multipage tabulations are often set with the \Lpack{longtable} or
 \Lpack{xtab} packages, which can of course be used with the class. For
@@ -1597,65 +1670,73 @@
 %% \appendix
 \section{Packages}
 
-    Most packages work with the \Mname\ class, the main exception being
-the \Lpack{hyperref} package. This package modifies
-many of the internals of the standard classes but does not cater for all of
-the differences between \Mname\ and the standard ones. If you wish to use
-\Lpack{hyperref} with \Mname\ then you must use the \Lpack{memhfixc}
+Most packages work with the \Mname\ class, the main exception being
+the \Lpack{hyperref} package. This package modifies many of the
+internals of the standard classes but does not cater for all of the
+differences between \Mname\ and the standard ones.
+
+If you use \Lpack{hyperref} with \Mname\ then the \Lpack{memhfixc}
 package\footnote{\Lpack{memhfixc} is supplied as part of the \Mname\
-distribution.} after using \Lpack{hyperref}. For example like:
-\begin{lcode}
-\documentclass[...]{memoir}
-...
-\usepackage[...]{hyperref}
-\usepackage{memhfixc}
-...
-\begin{document}
-\end{lcode}
-However, if you have a version of \Lpack{hyperref} dated 2006/11/15 or after, 
-\Lpack{hyperref}
-will automatically call in \Lpack{memhfixc} so that you don't have to do 
-anything.
+  distribution.} is automatically loaded by \Lpack{hyperref} to
+provide some class specific alterations.
+% For example like:
+% \begin{lcode}
+% \documentclass[...]{memoir}
+% ...
+% \usepackage[...]{hyperref}
+% \usepackage{memhfixc}
+% ...
+% \begin{document}
+% \end{lcode}
+% However, if you have a version of \Lpack{hyperref} dated 2006/11/15 or after, 
+% \Lpack{hyperref}
+% will automatically call in \Lpack{memhfixc} so that you don't have to do 
+% anything.
 
 The \Mname\ class includes code either equivalent to, or extensions of, the 
 following packages; that is, the set of commands and environments is at least
 the same as those in the packages: 
 %\begin{itemize}%\item 
-\begin{lineitems}
+\begin{adjustwidth}{2em}{2em}
+  \begin{center}
+    \begin{lineitems}
       \Lpack{abstract}
-\item \Lpack{appendix}
-\item \Lpack{array}
-\item \Lpack{booktabs}
-\item \Lpack{ccaption}
-\item \Lpack{chngcntr}
-\item \Lpack{chngpage}
-\item \Lpack{dcolumn}
-\item \Lpack{delarray}
-\item \Lpack{enumerate}
-\item \Lpack{epigraph}
-\item \Lpack{framed}
-\item \Lpack{ifmtarg}
-\item \Lpack{ifpdf}
-\item \Lpack{index}
-\item \Lpack{makeidx}
-\item \Lpack{moreverb}
-\item \Lpack{needspace}
-\item \Lpack{newfile}
-\item \Lpack{nextpage}
-\item \Lpack{parskip}
-\item \Lpack{patchcmd}
-\item \Lpack{setspace}
-\item \Lpack{shortvrb}
-\item \Lpack{showidx}
-\item \Lpack{tabularx}
-\item \Lpack{titleref}
-\item \Lpack{titling}
-\item \Lpack{tocbibind}
-\item \Lpack{tocloft}
-\item \Lpack{verbatim}
-\item \Lpack{verse}.
-\end{lineitems}
-%\end{itemize}
+    \item \Lpack{appendix}
+      % \item \Lpack{array}
+    \item \Lpack{booktabs}
+    \item \Lpack{ccaption}
+    \item \Lpack{chngcntr}
+    \item \Lpack{chngpage}
+      % \item \Lpack{dcolumn}
+      % \item \Lpack{delarray}
+    \item \Lpack{enumerate}
+    \item \Lpack{epigraph}
+    \item \Lpack{framed}
+    \item \Lpack{ifmtarg}
+      % \item \Lpack{ifpdf}
+    \item \Lpack{index}
+    \item \Lpack{makeidx}
+    \item \Lpack{moreverb}
+    \item \Lpack{needspace}
+    \item \Lpack{newfile}
+    \item \Lpack{nextpage}
+    \item \Lpack{parskip}
+    \item \Lpack{patchcmd}
+    \item \Lpack{setspace}
+    \item \Lpack{shortvrb}
+    \item \Lpack{showidx}
+      % \item \Lpack{tabularx}
+    \item \Lpack{titleref}
+    \item \Lpack{titling}
+    \item \Lpack{tocbibind}
+    \item \Lpack{tocloft}
+    \item \Lpack{verbatim}
+    \item \Lpack{verse}.
+    \end{lineitems}
+  \end{center}
+\end{adjustwidth}
+% \end{itemize}
+
 The class automatically ignores any 
 \verb?\usepackage? or \verb?\RequirePackage? related to these. However, if
 you want to specifically use one of these packages rather than the integrated
@@ -1779,11 +1878,19 @@
 freely available from \pixctan\ if you wish to see exactly what it does
 and how it does it.
 
-    For a more interactive resource you can ask questions on the
-\url{comp.text.tex} newsgroup. If you are a newcomer to \pixctt\
-please read the FAQ~\cite{FAQ} before asking a question, and also read
-a few day's worth of messages to check that your question hasn't just
-been answered.
+For a more interactive resource you can ask questions on
+\begin{center}
+  \url{http://tex.stackexchange.com}.
+\end{center}
+-- if the question is \Mname\ related, please tag it so.
+
+
+
+%     For a more interactive resource you can ask questions on the
+% \url{comp.text.tex} newsgroup. If you are a newcomer to \pixctt\
+% please read the FAQ~\cite{FAQ} before asking a question, and also read
+% a few day's worth of messages to check that your question hasn't just
+% been answered.
 
 \section{Type conventions}
 
@@ -1994,12 +2103,11 @@
 
 \fancybreak{}
 
-\textit{From the maintainer:} It seems that traffic on
-\url{comp.text.tex} is less frequent. So most \theclass\ related
-questions should go to \url{http://tex.stackexchange.com}, please
-remember to tag them properly, that really helps locating the
-\theclass\ related questions. If no-one comes up with an answer, you
-can also write me directly via \texttt{daleif (at) math dot au dot dk}.
+\textit{From the maintainer:} Most \Mname\ related questions
+should go to \url{http://tex.stackexchange.com}, please remember to
+tag them properly, that really helps locating the \Mname\ related
+questions. If no-one comes up with an answer, you can also write me
+directly via \texttt{daleif (at) math dot au dot dk}.
 
 
 
@@ -2769,9 +2891,17 @@
   {\Popt{oldfontcommands}}%
   {Class option for permitting obsolete, deprecated font commands.}
 
-\end{itemize}
 
-    None of these options are defaulted.
+\item[\Lopt{fullptlayout}]\index{class options!layout truncation} 
+  disable point trunction of certain layout lengths, for example
+  \cmd{\textwidth}. The default is to round these of to a whole number
+  of points, this option disables this feature.
+  \glossary(fullptlayout)%
+  {\Popt{fullptlayout}}%
+  {Class option to disable point truncation of certain layout lengths.}
+\end{itemize}
+%
+None of these options are defaulted.
 
 \section{Remarks}
 
@@ -3188,8 +3318,8 @@
 
 \fancybreak{}
 
-See also section~\ref{sec:predefined-layouts} --
-\emph{\titleref{sec:predefined-layouts}}, where we present some extra
+See also section~\ref{sec:place-trimmed-page} --
+\emph{\titleref{sec:place-trimmed-page}}, where we present some extra
 commands. For example \cmd{\setpagecc} for placing a trimmed page
 centered on the stock.
 
@@ -3789,33 +3919,11 @@
   Readers may find several folio designs in \cite{MEMDESIGN}.
 \end{note}
 
+See also Section~\ref{sec:predefined-layouts}
+(\emph{\titleref{sec:predefined-layouts}}) for some predefined layouts.
 
 
-\fancybreak{}
 
-\begin{syntax}
-\cmd{\setcolsepandrule}\marg{colsep}\marg{thickness} \\
-\end{syntax}
-\glossary(setcolsepandrule)%
-  {\cs{setcolsepandrule}\marg{colsep}\marg{thickness}}%
-  {Sets the width of the gutter and the thickness of the rule in the gutter.}
-\glossary(columnsep)%
-  {\ls{columnsep}}%
-  {Width of the gutter between columns.}
-\glossary(columnseprule)%
-  {\ls{columnseprule}}%
- {Thickness of the rule in the gutter.}
-    For twocolumn\index{column!double} text the width of 
-the gutter\index{gutter}
-between the columns must be specified. \ltx\ also lets you draw a 
-vertical rule in the middle of the 
-gutter. The macro \cmd{\setcolsepandrule} 
-sets the gutter width\index{gutter!width}, \lnc{\columnsep}, to \meta{colsep} 
-and the thickness of the rule, \lnc{\columnseprule}, 
-to \meta{thickness}. A \meta{thickness} of 0pt means that the rule will be
-invisible. Visible rules usually have a thickness\index{rule!thickness} 
-of about 0.4pt. The total width of the twocolumns\index{column!double} 
-of text and the gutter equals the width of the typeblock\index{typeblock}.
 
     This completes the methods for specifying the layout of the
 main elements of the page --- the page\index{page!specifying size} 
@@ -4342,59 +4494,71 @@
 ...
 \end{lcode}
 
-\section{Printing and viewing}
-  
-    When \pdfltx\ is used to generate a \pixpdf\ version of a \Pclass{memoir}
-document some special setup must be done.
-\begin{syntax}
-\cmd{\fixpdflayout} \\
-\end{syntax}
-\glossary(fixpdflayout)%
-  {\cs{fixpdflayout}}%
-  {Sets up page size information for \pdfltx.}
-The macro \cmd{\fixpdflayout}\index{page layout!PDF} is automatically called after the preamble when
-\pdfltx{} is used to generate \pixpdf. The default definition is effectively:
-\begin{lcode}
-\newcommand*{\fixpdflayout}{
-  \pdfpageheight=\the\stockheight
-  \pdfpagewidth=\the\stockwidth
-  \ifxetex\else
-  \ifdim\pdforigin=0pt\pdforigin=1in\fi
-  \ifdim\pdfhorigin=0pt\pdfhorigin=1in\fi
-  \fi}
-\end{lcode}
-The first settings (\verb?\pdfpage...?) ensure that \pdfltx{} knows
-the size of the physical sheet\indextwo{stock}{size} for printing. 
-The \verb?\...origin? settings
-set the \pdf{} origin per the \tx\ origin, provided that their values are
-0pt. If you have set the origin values yourself, either in a \pdfltx{} 
-configuration\index{configuration file} file or earlier in the preamble, 
-the \cmd{\fixpdflayout}
-macro will not alter them (if you need an origin value to be 0 then
-set it to 1sp, which is visually indistinguishable from 0pt).
-
-\begin{syntax}
-\cmd{\fixdvipslayout} \\
-\end{syntax}
-\glossary(fixdvipslayout)%
-  {\cs{fixdvipslayout}}%
-  {Sets up page size information for dvi processors.}
-
-The macro \cmd{\fixdvipslayout}\index{page layout!dvips} is automatically 
-called after the preamble 
-when \pixpdf{} output is not being produced. It provides the \Lprog{dvips} 
-processor
-with information about the stock\indextwo{stock}{size} size, 
-which a viewer or printer may use.
-
-The macros \cmd{\fixpdflayout} and \cmd{\fixdvipslayout} are
-automatically executed at the start of the document, in combinations
-that make the most sense (i.e., \cmd{\fixpdflayout} when using XeLaTeX
-or \pdfltx{} and \cmd{fixdvipslayout} for the rest.
+%\section{Printing and viewing}
+
+\section{Emitting the page size}
+\label{sec:emitting-page-size}
+
+At the start of the document the class will automatically emit the
+chosen stocksize to the output format (DVI or PDF).\footnote{In
+  earlier versions we had macros \cs{fixpdflayout} and
+  \cs{fixdvipslayout} that held some of the code needed to emit this
+  data. With the newer engines like LuaLaTeX, this became unfeasible
+  thus they we discontinued (their use now emit a warning).}
+
+
+%     When \pdfltx\ is used to generate a \pixpdf\ version of a \Pclass{memoir}
+% document some special setup must be done.
+% \begin{syntax}
+% \cmd{\fixpdflayout} \\
+% \end{syntax}
+% \glossary(fixpdflayout)%
+%   {\cs{fixpdflayout}}%
+%   {Sets up page size information for \pdfltx.}
+% The macro \cmd{\fixpdflayout}\index{page layout!PDF} is
+% \emph{automatically}\footnote{That is you do not need to.} called after the preamble when
+% \pdfltx{} is used to generate \pixpdf. The default definition is effectively:
+% \begin{lcode}
+% \newcommand*{\fixpdflayout}{
+%   \pdfpageheight=\the\stockheight
+%   \pdfpagewidth=\the\stockwidth
+%   \ifxetex\else
+%   \ifdim\pdforigin=0pt\pdforigin=1in\fi
+%   \ifdim\pdfhorigin=0pt\pdfhorigin=1in\fi
+%   \fi}
+% \end{lcode}
+% The first settings (\verb?\pdfpage...?) ensure that \pdfltx{} knows
+% the size of the physical sheet\indextwo{stock}{size} for printing. 
+% The \verb?\...origin? settings
+% set the \pdf{} origin per the \tx\ origin, provided that their values are
+% 0pt. If you have set the origin values yourself, either in a \pdfltx{} 
+% configuration\index{configuration file} file or earlier in the preamble, 
+% the \cmd{\fixpdflayout}
+% macro will not alter them (if you need an origin value to be 0 then
+% set it to 1sp, which is visually indistinguishable from 0pt).
+
+% \begin{syntax}
+% \cmd{\fixdvipslayout} \\
+% \end{syntax}
+% \glossary(fixdvipslayout)%
+%   {\cs{fixdvipslayout}}%
+%   {Sets up page size information for dvi processors.}
+
+% The macro \cmd{\fixdvipslayout}\index{page layout!dvips} is automatically 
+% called after the preamble 
+% when \pixpdf{} output is not being produced. It provides the \Lprog{dvips} 
+% processor
+% with information about the stock\indextwo{stock}{size} size, 
+% which a viewer or printer may use.
+
+% The macros \cmd{\fixpdflayout} and \cmd{\fixdvipslayout} are
+% automatically executed at the start of the document, in combinations
+% that make the most sense (i.e., \cmd{\fixpdflayout} when using XeLaTeX
+% or \pdfltx{} and \cmd{fixdvipslayout} for the rest.
 
 
-\LMnote{2015/02/23}{Next lines outcommented as I do not feel that this
-  kind of examples below in a manual like this}
+% \LMnote{2015/02/23}{Next lines outcommented as I do not feel that this
+%   kind of examples belong in a manual like this}
 
 %     With a \Lopt{landscape} document and using the processing route
 % \verb?latex -> dvips? the resulting \file{ps} \pscript{} file may appear 
@@ -4704,12 +4870,30 @@
 through \ref{fig:pagelastlay}. These were produced with the aid of the
 \Lpack{layouts} package.
 
-\fancybreak{}
+
+\section{Place trimmed page on the stock}
+\label{sec:place-trimmed-page}
+
+As mentined earlier, when the resulting paper size is smaller than the
+stock that it is printed on, you'll need to specify the trimmed size
+(the resulting paper size) using \cmd{\settrimmedsize} and you'll want
+to position that in relation to the stock using \cmd{\settrims}. 
+
+There are nine common layouts, so we made nine easy tro use
+macros. The take the same arguments as \cmd{\settrimmedsize} and then
+automatically add an appropriate \cmd{\settrims}.
+
 
 \begin{syntax}
-\cmd{\setpagebl}\marg{height}\marg{width}\marg{ratio} \\
-\cmd{\setpageml}\marg{height}\marg{width}\marg{ratio} \\
-\cmd{\setpagetl}\marg{height}\marg{width}\marg{ratio} \\
+\cmd{\setpagetl}\marg{height}\marg{width}\marg{ratio}  (top-left) \\
+\cmd{\setpagetm}\marg{height}\marg{width}\marg{ratio} (top-middle)\\
+\cmd{\setpagetr}\marg{height}\marg{width}\marg{ratio}  (top-right)\\
+\cmd{\setpagebl}\marg{height}\marg{width}\marg{ratio} (bottom-left)\\
+\cmd{\setpagebm}\marg{height}\marg{width}\marg{ratio} (bottom-middle)\\
+\cmd{\setpagebr}\marg{height}\marg{width}\marg{ratio} (bottom-right) \\
+\cmd{\setpageml}\marg{height}\marg{width}\marg{ratio} (middle-left) \\
+\cmd{\setpagecc}\marg{height}\marg{width}\marg{ratio} (center, alias \cmd{\setpagemm}) \\
+\cmd{\setpagemr}\marg{height}\marg{width}\marg{ratio}  (middle-right)\\
 \end{syntax}
 \glossary(setpagebl)%
   {\cs{setpagebl}\marg{height}\marg{width}\marg{ratio}}%
@@ -4746,17 +4895,125 @@
 \glossary(setpagecc)%
   {\cs{setpagecc}\marg{height}\marg{width}\marg{ratio}}%
   {Specifies a page of the given dimensions positioned at the center
-   of the stock; see \cs{settrimmedsize}.}
+    of the stock; see \cs{settrimmedsize}.}
+
+  \noindent
+Note: Always remember to combine this with \cmd{\checkandfixthelayout}!
+  
+  
+% When your page is smaller than the stock it has to be positioned on
+% the stock by specifying the trims to give the desired size and location.
+% The macro \cmd{\setpagebl}, which takes the same arguments as 
+% \cmd{\settrimmedsize} (see \tref{tab:rectsize} on \pref{tab:rectsize}),
+% calculates the trims so that the page is located at the bottom left of
+% the stock. Similarly \cmd{\setpageml} and \cmd{\setpagetl} will locate
+% the page at the middle left and the top left, respectively, of the
+% stock.
+
+\goodbreak
+ 
+ \noindent
+For instance, if you are using letterpaper stock but want the final trimmed
+page size to be A5, then this will put page area at the bottom left of the
+stock.
+\begin{lcode}
+% letterpaper stock added via class option  
+\pagebv % sets \paperheight and \paperwidth for A5 paper
+\setpagebl{\paperheight}{\paperwidth}{*}
+...
+\checkandfixthelayout
+\end{lcode}
+The above macros position the page at the left of the stock because usually 
+trimming of the stock is limited to the top, right, and bottom, the left 
+being the spine when the pages are finally assembled.
+
+
+% To reposition the page to
+% the center of the stock the following will halve the top and edge
+% trims.
+% \begin{lcode}
+% \settrims{0.5\trimtop}{0.5\trimedge}
+% ...
+% \checkandfixthelayout
+% \end{lcode}
+
+% \begin{syntax}
+% \end{syntax}
+
+%     The commands \cmd{\setpagetm}, \cmd{\setpagetr}, \cmd{\setpagemr},
+% \cmd{\setpagebr}, \cmd{\setpagebm}, \cmd{\setpagecc} are analagous to the
+% earlier ones and they set a page at the top middle, top right, middle right,
+% bottom right, bottom middle and centered with respect to the stock.
+
+
+% Remember that after you have finished defining the layout you want you
+% have to call \cmd{\checkandfixthelayout} for all the changes to take
+% effect.
+
+% \fancybreak{}
+
+In Figure~\ref{fig:setpage} we show the effect of the nine
+\cmd{\setpageXX}. The code used for the examples is similar to the
+code below, and then the result was scaled down.
+
+\begin{lcode}
+\documentclass[showtrims]{memoir}
+\trimLmarks
+\setstocksize{18cm}{15cm}
+\setpagebl{16cm}{12cm}{*}
+\setlrmarginsandblock{15mm}{15mm}{*}
+\setulmarginsandblock{15mm}{15mm}{*}
+\setheadfoot{5mm}{5mm}
+\checkandfixthelayout[fixed]
+\pagestyle{empty}
+\AtBeginDocument{\LARGE}
+\begin{document}
+\begin{vplace}
+  \centering
+  \cs{setpagebl}\marg{height}\marg{width}\marg{ratio}
+\end{vplace}
+\end{document}
+\end{lcode}
+
+
+
+
+\begin{figure}[htbp]
+  \centering
+  \fboxsep=0pt
+  \fbox{\includegraphics[page=1,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=2,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=3,scale=0.3]{setpage-example.pdf}}
+
+  \medskip
+  
+  \fbox{\includegraphics[page=4,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=5,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=6,scale=0.3]{setpage-example.pdf}}
+
+  \medskip
+
+  
+  \fbox{\includegraphics[page=7,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=8,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=9,scale=0.3]{setpage-example.pdf}}
+
+  \caption{Example of the nine \cs{setpageXX} macros for placing
+    a trimmed page on the stock. These are all odd pages, under
+    \Lopt{twoside}, even pages will have the left/right trims
+    reversed. The outer fra indicate the stock size. Inside the trim
+    marks hint at where the page is positioned on the stock.}
+  \label{fig:setpage}
+\end{figure}
 
-    The commands \cmd{\setpagetm}, \cmd{\setpagetr}, \cmd{\setpagemr},
-\cmd{\setpagebr}, \cmd{\setpagebm}, \cmd{\setpagecc} are analagous to the
-earlier ones and they set a page at the top middle, top right, middle right,
-bottom right, bottom middle and centered with respect to the stock.
 
 
-Remember that after you have finished defining the layout you want you
-have to call \cmd{\checkandfixthelayout} for all the changes to take
-effect.
 
 
 %#% extend
@@ -5921,15 +6201,39 @@
 \label{sec:text-case}
 
 The standard kernel \cmd{\MakeUppercase}\marg{text} and
-\cmd{\MakeLowercase}\marg{text} 
-basically upper or lower case everything it can get its hands on. This
-is not particularly nice if the \meta{text} contain, say, math.
-
-In order to help with this we provide the \cmd{\MakeTextUppercase} and
-\cmd{\MakeTextLowercase} macros from the \Lpack{textcase} package
-(\cite{textcase}) by David Carlisle. The following is DCs own
-documentation of the provided code changed to match the typography we
-use.
+\cmd{\MakeLowercase}\marg{text} basically upper or lower case
+everything it can get its hands on. This is not particularly nice if
+the \meta{text} contain, say, math.
+
+In order to help with this we load the \Lpack{textcase} package
+(\cite{textcase}) by David Carlisle (with the \texttt{overload}
+option) which provide the \cmd{\MakeTextUppercase} and
+\cmd{\MakeTextLowercase} macros.\footnote{Overload causes the original
+  \cmd{\MakeUppercase} and \cmd{\MakeLowercase} to be copies of
+  \cmd{\MakeTextUppercase} and \cmd{\MakeTextLowercase}.}
+
+
+\begin{caveat}
+  This change was made in October 2019, earlier we embedded a copy of
+  \texttt{textcase} into the class it self. Now we check to see of you
+  have a copy and use that, if found, if not we use our old embedded
+  copy.
+
+  If, for some reason, you want the original \cmd{\MakeUppercase} and
+  \cmd{\MakeLowercase} macros back, add
+\begin{syntax}
+  \cmd{\MemRestoreOrigMakecase}
+\end{syntax}
+to your preamble.
+\end{caveat}
+
+
+The following is DCs own documentation of the provided code changed to
+match the typography we use.\footnote{Note: This documentation will
+  probably be removed in a future version and replaced by a summary
+  and a reference to \cite{textcase}.}
+
+
 
 \fancybreak{}
 
@@ -9712,7 +10079,22 @@
   \newcommand\subsectionsecnumformat{\fbox{\enspace\thesubsection\enspace}\enspace}
 \end{lcode}
 Since the macro is only called in the proper context, we can use
-\cmd{\thesection} directly in the code for \cmd{\section}.
+\cmd{\thesection} directly in the code for \cmd{\section}. However,
+this requires you to define formatting macros for all sectional
+headings. Here is how to reverse it, that is see if a format exists,
+use it, otherwise use a default:
+\begin{lcode}
+  \makeatletter
+  \setsecnumformat{%
+    \@ifundefined{#1secnumformat}{% nope, use a default
+      \csname the#1\endcsname\quad%
+    }{%
+      \csname #1secnumformat\endcsname%
+    }%
+  }
+\makeatother
+\end{lcode}
+
 
 
 
@@ -10965,9 +11574,12 @@
 margin. If any \pstyle{empty} pages should be marked as well, specify
 similar footers for that style as well.
 
+\fancybreak{}
+
+
     Here is part of the standard definition of the \pstyle{headings}
 pagestyle for the \Lclass{book} class which uses many internal \ltx\ commands;
-but note that \Mname\ does not use this.
+but note that the class does not use this!
 \begin{lcode}
 \def\ps@headings{%
   \let\@oddfoot\@empty\let\@evenfoot\@empty
@@ -11005,7 +11617,7 @@
 \makeoddhead{headings}{\slshape\rightmark}{}{\thepage}
 \makepsmarks{headings}{%
   \def\chaptermark##1{%
-    \markboth{\MakeUppercase{%
+    \markboth{\MakeTextUppercase{%
       \ifnum\c@secnumdepth > \m@ne
         \if@mainmatter
           \@chapapp\ \thechapter. \ %
@@ -11013,74 +11625,96 @@
       \fi
       ##1}}{}}%
   \def\sectionmark##1{%
-    \markright{\MakeUppercase{%
+    \markright{\MakeTextUppercase{%
       \ifnum\c@secnumdepth > \z@
         \thesection. \ %
       \fi
       ##1}}}
-  \def\tocmark{\markboth{\MakeUppercase{\contentsname}}{}}
-  \def\lofmark{\markboth{\MakeUppercase{\listfigurename}}{}}
-  \def\lotmark{\markboth{\MakeUppercase{\listtablename}}{}}
-  \def\bibmark{\markboth{\MakeUppercase{\bibname}}{}}
-  \def\indexmark{\markboth{\MakeUppercase{\indexname}}{}}
-  \def\glossarymark{\markboth{\MakeUppercase{\glossaryname}}{}}}
+  \def\tocmark{\markboth{\MakeTextUppercase{\contentsname}}{}}
+  \def\lofmark{\markboth{\MakeTextUppercase{\listfigurename}}{}}
+  \def\lotmark{\markboth{\MakeTextUppercase{\listtablename}}{}}
+  \def\bibmark{\markboth{\MakeTextUppercase{\bibname}}{}}
+  \def\indexmark{\markboth{\MakeTextUppercase{\indexname}}{}}
+  \def\glossarymark{\markboth{\MakeTextUppercase{\glossaryname}}{}}}
 \end{lcode}
 As you can see, defining the marks for a pagestyle is not necessarily the
-simplest thing in the world. However, courtesy of Lars\index{Madsen, Lars} Madsen,
-help is at hand.
+simplest thing in the world. With the extra tools described above,
+this code can be reduced to
+\begin{lcode}
+\makepagestyle{headings}
+\makeevenhead{headings}{\thepage}{}{\slshape\leftmark}
+\makeoddhead{headings}{\slshape\rightmark}{}{\thepage}
+\makepsmarks{headings}{%
+  \createmark{chapter}{left}{shownumber}{\@chapapp\ }{. \ }
+  \createmark{section}{right}{shownumber}{}{. \ }
+  \createplainmark{toc}{both}{\contentsname}
+  \createplainmark{lof}{both}{\listfigurename}
+  \createplainmark{lot}{both}{\listtablename}
+  \createplainmark{bib}{both}{\bibname}
+  \createplainmark{index}{both}{\indexname}
+  \createplainmark{glossary}{both}{\glossaryname}
+}
+\end{lcode}
+
 
-\begin{syntax}
-\cmd{\createplainmark}\marg{type}\marg{marks}\marg{text} \\
-\cmd{\memUChead}\marg{text} \\
-\cmd{\uppercaseheads} \cmd{\nouppercaseheads} \\
-\cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix} \\
-\end{syntax}
-\glossary(createplainmark)%
-  {\cs{createplainmark}\marg{type}\marg{marks}\marg{text}}%
-  {Defines the \cs{typemark} macro using \meta{text} as the mark, where
-  \meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}.}
-\glossary(createmark)%
-  {\cs{createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}}%
-  {Defines the \cs{secmark} macro where \meta{show} (\texttt{shownumber} 
-   or \texttt{nonumber}) controls whether the division number will be
-   displayed within \cs{mainmatter}, \meta{marks} is \texttt{left}, 
-   \texttt{both} or \texttt{right}, and \meta{prefix} and \meta{postfix}
-   are affixed before and after the \meta{sec} (division) number.}
-\glossary(memUChead)%
-  {\cs{memUChead}\marg{text}}%
-  {May uppercase \meta{text}, depending on \cs{uppercaseheads} and
-  \cs{nouppercaseheads}.}
-\glossary(uppercaseheads)%
-  {\cs{uppercaseheads}}%
-  {Defines \cs{memUChead} as equivalent to \cs{MakeUppercase}.}
-\glossary(nouppercaseheads)%
-  {\cs{nouppercaseheads}}%
-  {Defines \cs{memUChead} as \cs{relax} (i.e., do nothing).}
 
 
-The macro \cmd{\createplainmark} defines the \verb?\<type>mark?, where 
-\meta{type} is an unnumbered division-like head, such as \texttt{toc},
-\texttt{lof}, \texttt{index}, using \meta{text} as the mark value, and 
-\meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}. For example:
-\begin{lcode}
-\createplainmark{toc}{left}{\contentsname}
-\createplainmark{lot}{right}{\listtablename}
-\createplainmark{bib}{both}{\bibname}
-\end{lcode}
-is equivalent to
-\begin{lcode}
-\def\tocmark{\markboth{\memUChead{\contentsname}}{}}
-\def\lotmark{\markright{\memUChead{\listtablename}}}
-\def\lofmark{\markboth{\memUChead{\bibname}}{\memUChead{\bibname}}}
-\end{lcode}
 
-    Following the declaration \cmd{\uppercaseheads} the \cmd{\memUChead} 
-command is equivalent to \cmd{\MakeUppercase} but after the 
-\cmd{\nouppercaseheads} it is equivalent to \cmd{\relax} (which does nothing).
-The \cmd{\createplainmark} macro wraps \cmd{\memUChead} around the \meta{text}
-argument within the generated \cs{mark(both/right)} macro. By using the
-\cs{(no)uppercaseheads} declarations you can control the uppercasing, or
-otherwise, of the mark texts. The default is \cmd{\uppercaseheads}.
+% However, courtesy of Lars\index{Madsen, Lars} Madsen,
+% help is at hand.
+
+% \begin{syntax}
+% \cmd{\createplainmark}\marg{type}\marg{marks}\marg{text} \\
+% \cmd{\memUChead}\marg{text} \\
+% \cmd{\uppercaseheads} \cmd{\nouppercaseheads} \\
+% \cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix} \\
+% \end{syntax}
+% \glossary(createplainmark)%
+%   {\cs{createplainmark}\marg{type}\marg{marks}\marg{text}}%
+%   {Defines the \cs{typemark} macro using \meta{text} as the mark, where
+%   \meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}.}
+% \glossary(createmark)%
+%   {\cs{createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}}%
+%   {Defines the \cs{secmark} macro where \meta{show} (\texttt{shownumber} 
+%    or \texttt{nonumber}) controls whether the division number will be
+%    displayed within \cs{mainmatter}, \meta{marks} is \texttt{left}, 
+%    \texttt{both} or \texttt{right}, and \meta{prefix} and \meta{postfix}
+%    are affixed before and after the \meta{sec} (division) number.}
+% \glossary(memUChead)%
+%   {\cs{memUChead}\marg{text}}%
+%   {May uppercase \meta{text}, depending on \cs{uppercaseheads} and
+%   \cs{nouppercaseheads}.}
+% \glossary(uppercaseheads)%
+%   {\cs{uppercaseheads}}%
+%   {Defines \cs{memUChead} as equivalent to \cs{MakeTextUppercase}.}
+% \glossary(nouppercaseheads)%
+%   {\cs{nouppercaseheads}}%
+%   {Defines \cs{memUChead} as \cs{relax} (i.e., do nothing).}
+
+
+% The macro \cmd{\createplainmark} defines the \verb?\<type>mark?, where 
+% \meta{type} is an unnumbered division-like head, such as \texttt{toc},
+% \texttt{lof}, \texttt{index}, using \meta{text} as the mark value, and 
+% \meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}. For example:
+% \begin{lcode}
+% \createplainmark{toc}{left}{\contentsname}
+% \createplainmark{lot}{right}{\listtablename}
+% \createplainmark{bib}{both}{\bibname}
+% \end{lcode}
+% is equivalent to
+% \begin{lcode}
+% \def\tocmark{\markboth{\memUChead{\contentsname}}{}}
+% \def\lotmark{\markright{\memUChead{\listtablename}}}
+% \def\lofmark{\markboth{\memUChead{\bibname}}{\memUChead{\bibname}}}
+% \end{lcode}
+
+%     Following the declaration \cmd{\uppercaseheads} the \cmd{\memUChead} 
+% command is equivalent to \cmd{\MakeTextUppercase} but after the 
+% \cmd{\nouppercaseheads} it is equivalent to \cmd{\relax} (which does nothing).
+% The \cmd{\createplainmark} macro wraps \cmd{\memUChead} around the \meta{text}
+% argument within the generated \cs{mark(both/right)} macro. By using the
+% \cs{(no)uppercaseheads} declarations you can control the uppercasing, or
+% otherwise, of the mark texts. The default is \cmd{\uppercaseheads}.
 
 \LMnote{2010/02/08}{added the following paragraph}
 Note that if you want to use a predefined page style, but would like
@@ -11092,59 +11726,49 @@
 \end{lcode}
 
 
-    The macro \cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}
-defines the \verb?\<sec>mark? macro where \meta{sec} is a sectional division
-such as \texttt{part}, \texttt{chapter}, \texttt{section}, etc., 
-and \meta{show} (\texttt{shownumber} 
-or \texttt{nonumber}) controls whether the division number will be
-displayed within \cs{mainmatter}. The \meta{marks} argument is \texttt{left}, 
-\texttt{both} or \texttt{right}, and \meta{prefix} and \meta{postfix}
-are affixed before and after the division number. For example:
-\begin{lcode}
-\createmark{section}{left}{nonumber}{}{}
-\createmark{section}{both}{nonumber}{}{}
-\createmark{section}{right}{nonumber}{}{}
-\end{lcode}
-is equivalent to, respectively
-\begin{lcode}
-\def\sectionmark#1{\markboth{#1}{}}
-\def\sectionmark#1{\markboth{#1}{#1}}
-\def\sectionmark#1{\markight{#1}}
-\end{lcode}
+%     The macro \cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}
+% defines the \verb?\<sec>mark? macro where \meta{sec} is a sectional division
+% such as \texttt{part}, \texttt{chapter}, \texttt{section}, etc., 
+% and \meta{show} (\texttt{shownumber}, \texttt{nonumber} or
+% \texttt{notitle} (implies \texttt{shownumber})) controls whether the division number will be
+% displayed within \cs{mainmatter}. The \meta{marks} argument is \texttt{left}, 
+% \texttt{both} or \texttt{right}, and \meta{prefix} and \meta{postfix}
+% are affixed before and after the division number. For example:
+% \begin{lcode}
+% \createmark{section}{left}{nonumber}{}{}
+% \createmark{section}{both}{nonumber}{}{}
+% \createmark{section}{right}{nonumber}{}{}
+% \end{lcode}
+% is equivalent to, respectively
+% \begin{lcode}
+% \def\sectionmark#1{\markboth{#1}{}}
+% \def\sectionmark#1{\markboth{#1}{#1}}
+% \def\sectionmark#1{\markight{#1}}
+% \end{lcode}
 
-The difference between \cmd{\createmark} and \cmd{\createplainmark} is
-that the former create a macro that takes an argument, whereas
-\cmd{\createplainmark} does not.
+% The difference between \cmd{\createmark} and \cmd{\createplainmark} is
+% that the former create a macro that takes an argument, whereas
+% \cmd{\createplainmark} does not.
 
 
-    Using these macros \Mname's current definition of 
-\verb?\makepsmarks{headings}? is much simpler (it also leads to a 
-slightly different result as the \texttt{toc} etc., marks set both
-the \cmd{\leftmark} and \cmd{\rightmark} instead of just the 
-\cmd{\leftmark}):
-\begin{lcode}
-\makepsmarks{headings}{%
-  \createmark{chapter}{left}{shownumber}{\@chapapp\ }{. \ }
-  \createmark{section}{right}{shownumber}{}{. \ }
-  \createplainmark{toc}{both}{\contentsname}
-  \createplainmark{lof}{both}{\listfigurename}
-  \createplainmark{lot}{both}{\listtablename}
-  \createplainmark{bib}{both}{\bibname}
-  \createplainmark{index}{both}{\indexname}
-  \createplainmark{glossary}{both}{\glossaryname}}
-\end{lcode}
+%     Using these macros \Mname's current definition of 
+% \verb?\makepsmarks{headings}? is much simpler (it also leads to a 
+% slightly different result as the \texttt{toc} etc., marks set both
+% the \cmd{\leftmark} and \cmd{\rightmark} instead of just the 
+% \cmd{\leftmark}):
+% \begin{lcode}
+% \makepsmarks{headings}{%
+%   \createmark{chapter}{left}{shownumber}{\@chapapp\ }{. \ }
+%   \createmark{section}{right}{shownumber}{}{. \ }
+%   \createplainmark{toc}{both}{\contentsname}
+%   \createplainmark{lof}{both}{\listfigurename}
+%   \createplainmark{lot}{both}{\listtablename}
+%   \createplainmark{bib}{both}{\bibname}
+%   \createplainmark{index}{both}{\indexname}
+%   \createplainmark{glossary}{both}{\glossaryname}}
+% \end{lcode}
 
 
-\LMnote{2010/02/08}{fixed typo}
-When \Mname{} runs the marks part of page style, it does not zero out
-old marks, i.e.\ if an old \cmd{\sectionmark} exist, it still exist
-even if we do not change it.  This is both a good and a bad thing. To help
-users redefine these marks to doing nothing we provide
-\begin{syntax}
-\cmd{\clearplainmark}\marg{type}\\
-\cmd{\clearmark}\marg{type}\\  
-\end{syntax}
-The used types are the same as for \cmd{\createplainmark} and \cmd{\createmark}.
 
 
 
@@ -20249,19 +20988,23 @@
 put just after the bottom line of text. The standard positioning is
 used following the \cmd{\feetabovefloat} declaration, which is the default.
 
-\begin{syntax}
-\cmd{\feetatbottom} \\
-\end{syntax}
-\glossary(feetatbottom)%
-  {\cs{feetatbottom}}%
-  {Place footnotes at the very bottom of the text block whenever we
-    are in a non \cs{flushbottom} context.}
-Then\Added{2015/04/22} we use \cs{raggedbottom} or similar, \LaTeX{}
-will by default attach the footnotes just below the text. In many
-cases it may look better if the footnotes are being build from the
-bottom of the texst block up. Issuing \cs{feetatbottom} does
-this. Please note that \cs{feetatbottom} has no effect whenever
-\cs{flushbottom} is active.
+
+
+\LMnote{2018/09/19}{Removed \cs{feetatbottom} from the manual. It does not
+  actually do anything. The footnotes are always at the bottom}
+% \begin{syntax}
+% \cmd{\feetatbottom} \\
+% \end{syntax}
+% \glossary(feetatbottom)%
+%   {\cs{feetatbottom}}%
+%   {Place footnotes at the very bottom of the text block whenever we
+%     are in a non \cs{flushbottom} context.}
+% Then\Added{2015/04/22} we use \cs{raggedbottom} or similar, \LaTeX{}
+% will by default attach the footnotes just below the text. In many
+% cases it may look better if the footnotes are being build from the
+% bottom of the texst block up. Issuing \cs{feetatbottom} does
+% this. Please note that \cs{feetatbottom} has no effect whenever
+% \cs{flushbottom} is active.
 
 
 
