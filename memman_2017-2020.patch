--- memman.tex	2016-11-25 19:29:30.000000000 +0100
+++ /usr/local/texlive/2020/texmf-dist/doc/latex/memoir/memman.tex	2020-10-06 23:35:11.000000000 +0200
@@ -9,9 +9,12 @@
 %
 %\listfiles
 \documentclass[10pt,letterpaper,extrafontsizes]{memoir}
-\listfiles
 \usepackage{comment}
 
+\hfuzz=5pt
+
+%\setlength\overfullrule{5pt}
+
 
 % For (non-printing) notes  \PWnote{date}{text}
 \newcommand{\PWnote}[2]{} 
@@ -83,9 +86,9 @@
 
 % \svnidlong
 % {}
-% {$LastChangedDate: 2015-03-05 18:49:59 +0100 (Thu, 05 Mar 2015) $}
-% {$LastChangedRevision: 516 $}
-% {$LastChangedBy: daleif $}
+% {$LastChangedDate: 2020-03-25 19:00:55 +0100 (Wed, 25 Mar 2020) $}
+% {$LastChangedRevision: 686 $}
+% {$LastChangedBy: daleif@math.au.dk $}
 
 
 
@@ -116,21 +119,52 @@
 
 
 
+
+
 %% end preamble
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %#% extend
 
+
+%\hfuzz=10pt
+
 \usepackage[draft]{fixme}
 \fxsetup{
-  layout=marginnote
+  multiuser,
+  marginface=\normalfont\tiny,
+  innerlayout=noinline,
+  layout=marginnote,
 }
- 
+\usepackage{tikz,ragged2e}
+\makeatletter
+% extra feature, vadj=length kan flytte på fxnotes hvis de overlapper
+\@fxdefinekey{layout}{vadj}{\def\marginnotevadjust{#1}}
 
-\begin{document}
+% endnu mere ekstra feature, kræver tikz og calc tikz lib
 
+\renewcommand*\FXLayoutMarginNote[3]{%
+  \tikz[overlay,remember picture]\coordinate (A) at (0,0);%
+  \marginnote[%
+    \RaggedLeft%
+    \rlap{\tikz[overlay,remember picture]\coordinate(C) at (0,0);}%
+    \@fxuseface{margin}%
+    \@fxtextstd{#1}{#2}{#3}%
+    {\tikz[overlay,remember picture,ultra thin,cyan]\draw(A) -| ++(0,-2pt) -|(C);}%
+  ]{%
+    \RaggedRight%
+    \tikz[overlay,remember picture]\coordinate(B) at (0,0);%
+    \@fxuseface{margin}%
+    \@fxtextstd{#1}{#2}{#3}%
+    \tikz[overlay,remember picture,ultra thin,cyan]\draw(A) -| ++(0,-2pt) -|(B);%
+  }%
+}
+\makeatother
 
 
 
+\begin{document}
+
+
 %#% extstart input intro.tex
 
 
@@ -212,8 +246,15 @@
 \setlength{\parindent}{0pt}
 \setlength{\parskip}{\baselineskip}
 %%\ttfamily
-\textcopyright{} 2001 --- 2010 Peter R. Wilson \\
-\textcopyright{} 2011 --- \phantom{2014} Lars Madsen \\
+%\textcopyright{} 2001 --- 2010 Peter R. Wilson \\
+%\textcopyright{} 2011 --- \phantom{2099} Lars Madsen \\
+
+\begin{tabular}{@{} l l}
+  \textcopyright{} 2001\:---\:2010 &Peter R. Wilson \\
+ \textcopyright{} 2011\:---\:& Lars Madsen 
+\end{tabular}
+
+
 All rights reserved
 
 The Herries Press, Normandy Park, WA.
@@ -307,10 +348,32 @@
 
 \setupshorttoc
 \tableofcontents
-\clearpage
+\clearforchapter
 \setupparasubsecs
 \setupmaintoc
+
+\begingroup
+
+% important point here: We need \endlineshar=-1 here for the inline
+% list of subsections. Why? Beacause we have subsection subsubsection
+% subsection, and under hyperref running the l@subsubsection for
+% subsubsection, which typesets nothing, ruins our \ignorespaces in
+% our redefinition of \l@subsection (it cannot see and ignore the space after the
+% \contentsline line for subsubsection). Easiest solution: use
+% change \endlinechar
+%
+% Special thanks to David Carlisle in the tex.stackexchange.com chat
+% for suggesting it
+
+
+\endlinechar=-1
+
+
 \tableofcontents
+
+\endgroup
+
+
 \setlength{\unitlength}{1pt}
 \clearpage
 \listoffigures
@@ -1251,9 +1314,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2015-04-22 17:17:51 +0200 (Wed, 22 Apr 2015) $}
-{$LastChangedRevision: 527 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2019-11-14 18:06:44 +0100 (Thu, 14 Nov 2019) $}
+{$LastChangedRevision: 662 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 \chapter{Introduction to the eighth edition}
 
@@ -1284,7 +1347,7 @@
 produced with \Mname\ 
 to meet a university's thesis layout requirements.
 
-    \Mname\ has improved substantially since it was first released ---
+The \Mname\  class has improved substantially since it was first released ---
 over 50 \ltx ers have provided code or suggestions for improvements.
 The class is included in the \TeXUG\ \tx\ distributions and the latest 
 version of the class and its supporting documentation is always
@@ -1303,16 +1366,16 @@
 
 \section{General considerations}
 
-    The class is a large one consisting of about 10,000 lines of \ltx\ code
-documented in a 400 page report; there is no need for most users to look at 
-this~\cite{MEMCODE}. However if you want to see exactly how some part, 
-or all of, \Mname\ is defined it is there for you to peruse.
-The document you are now reading is the separate comprehensive 
-User Manual~\cite{MEMMAN} which runs to about 500 pages, and from time to 
-time an Addendum %\cite{MEMADD} 
-is released noting extensions to the class.\footnote{Currently not in use.}
-Again, if you want to see how something was done in this Manual, which
-of course was prepared using \Mname\ itself, the source
+The class is a large one consisting of about 10,000 lines of \ltx\
+code documented in a 400 page report; there is no need for most users
+to look at this~\cite{MEMCODE}. However if you want to see exactly how
+some part, or all of, \Mname\ is defined it is there for you to
+peruse.  The document you are now reading is the separate
+comprehensive User Manual~\cite{MEMMAN} which runs to about 500 pages,
+and from time to time an Addendum %\cite{MEMADD}
+is released noting extensions to the class.\footnote{Currently not in
+  use.}  Again, if you want to see how something was done in this
+Manual, which of course was prepared using \Mname\ itself, the source
 is available for you to read.
 % There is also the \Lpack{memexsupp} package by Lars Madsen~\cite{MEMEXSUPP} 
 % which provides some extra facilities for the class.
@@ -1414,10 +1477,20 @@
 
 \section{Tables}
 
-    Code from the \Lpack{array}, \Lpack{dcolumn}, \Lpack{delarray} and
-\Lpack{tabularx} packges is integrated within the class. To improve
-the appearance of rules in tabular material the \Lpack{booktabs}
-package is also included.
+%    Code from the \Lpack{array}, \Lpack{dcolumn}, \Lpack{delarray} and
+%\Lpack{tabularx} packges is integrated within the class. To improve
+%the appearance of rules in tabular material the \Lpack{booktabs}
+%package is also included.
+
+The \Lpack{array}, \Lpack{dcolumn}, \Lpack{delarray}, \Lpack{tabularx}
+are automatically loaded by the class. In earlier days their code were
+embedded into the class, nowadays we just load the respective
+packages. To improve the appearance of rules in tabular material the
+\Lpack{booktabs} package is also included (as a code copy, this may
+change in the future).
+
+
+
 
     Multipage tabulations are often set with the \Lpack{longtable} or
 \Lpack{xtab} packages, which can of course be used with the class. For
@@ -1568,65 +1641,73 @@
 %% \appendix
 \section{Packages}
 
-    Most packages work with the \Mname\ class, the main exception being
-the \Lpack{hyperref} package. This package modifies
-many of the internals of the standard classes but does not cater for all of
-the differences between \Mname\ and the standard ones. If you wish to use
-\Lpack{hyperref} with \Mname\ then you must use the \Lpack{memhfixc}
+Most packages work with the \Mname\ class, the main exception being
+the \Lpack{hyperref} package. This package modifies many of the
+internals of the standard classes but does not cater for all of the
+differences between \Mname\ and the standard ones.
+
+If you use \Lpack{hyperref} with \Mname\ then the \Lpack{memhfixc}
 package\footnote{\Lpack{memhfixc} is supplied as part of the \Mname\
-distribution.} after using \Lpack{hyperref}. For example like:
-\begin{lcode}
-\documentclass[...]{memoir}
-...
-\usepackage[...]{hyperref}
-\usepackage{memhfixc}
-...
-\begin{document}
-\end{lcode}
-However, if you have a version of \Lpack{hyperref} dated 2006/11/15 or after, 
-\Lpack{hyperref}
-will automatically call in \Lpack{memhfixc} so that you don't have to do 
-anything.
+  distribution.} is automatically loaded by \Lpack{hyperref} to
+provide some class specific alterations.
+% For example like:
+% \begin{lcode}
+% \documentclass[...]{memoir}
+% ...
+% \usepackage[...]{hyperref}
+% \usepackage{memhfixc}
+% ...
+% \begin{document}
+% \end{lcode}
+% However, if you have a version of \Lpack{hyperref} dated 2006/11/15 or after, 
+% \Lpack{hyperref}
+% will automatically call in \Lpack{memhfixc} so that you don't have to do 
+% anything.
 
 The \Mname\ class includes code either equivalent to, or extensions of, the 
 following packages; that is, the set of commands and environments is at least
 the same as those in the packages: 
 %\begin{itemize}%\item 
-\begin{lineitems}
+\begin{adjustwidth}{2em}{2em}
+  \begin{center}
+    \begin{lineitems}
       \Lpack{abstract}
-\item \Lpack{appendix}
-\item \Lpack{array}
-\item \Lpack{booktabs}
-\item \Lpack{ccaption}
-\item \Lpack{chngcntr}
-\item \Lpack{chngpage}
-\item \Lpack{dcolumn}
-\item \Lpack{delarray}
-\item \Lpack{enumerate}
-\item \Lpack{epigraph}
-\item \Lpack{framed}
-\item \Lpack{ifmtarg}
-\item \Lpack{ifpdf}
-\item \Lpack{index}
-\item \Lpack{makeidx}
-\item \Lpack{moreverb}
-\item \Lpack{needspace}
-\item \Lpack{newfile}
-\item \Lpack{nextpage}
-\item \Lpack{parskip}
-\item \Lpack{patchcmd}
-\item \Lpack{setspace}
-\item \Lpack{shortvrb}
-\item \Lpack{showidx}
-\item \Lpack{tabularx}
-\item \Lpack{titleref}
-\item \Lpack{titling}
-\item \Lpack{tocbibind}
-\item \Lpack{tocloft}
-\item \Lpack{verbatim}
-\item \Lpack{verse}.
-\end{lineitems}
-%\end{itemize}
+    \item \Lpack{appendix}
+      % \item \Lpack{array}
+    \item \Lpack{booktabs}
+    \item \Lpack{ccaption}
+    \item \Lpack{chngcntr}
+    \item \Lpack{chngpage}
+      % \item \Lpack{dcolumn}
+      % \item \Lpack{delarray}
+    \item \Lpack{enumerate}
+    \item \Lpack{epigraph}
+    \item \Lpack{framed}
+    \item \Lpack{ifmtarg}
+      % \item \Lpack{ifpdf}
+    \item \Lpack{index}
+    \item \Lpack{makeidx}
+    \item \Lpack{moreverb}
+    \item \Lpack{needspace}
+    \item \Lpack{newfile}
+    \item \Lpack{nextpage}
+    \item \Lpack{parskip}
+    \item \Lpack{patchcmd}
+    \item \Lpack{setspace}
+    \item \Lpack{shortvrb}
+    \item \Lpack{showidx}
+      % \item \Lpack{tabularx}
+    \item \Lpack{titleref}
+    \item \Lpack{titling}
+    \item \Lpack{tocbibind}
+    \item \Lpack{tocloft}
+    \item \Lpack{verbatim}
+    \item \Lpack{verse}.
+    \end{lineitems}
+  \end{center}
+\end{adjustwidth}
+% \end{itemize}
+
 The class automatically ignores any 
 \verb?\usepackage? or \verb?\RequirePackage? related to these. However, if
 you want to specifically use one of these packages rather than the integrated
@@ -1651,14 +1732,16 @@
 The class also provides functions similar to those provided by the following 
 packages, although the commands are different: 
 %\begin{itemize}%\item 
-\begin{lineitems}%\item 
-\Lpack{crop}
-\item \Lpack{fancyhdr}
-\item \Lpack{geometry}
-\item \Lpack{sidecap}
-\item \Lpack{subfigure}
-\item \Lpack{titlesec}.
-\end{lineitems}
+\begin{center}
+  \begin{lineitems}%\item
+    \Lpack{crop}
+  \item \Lpack{fancyhdr}
+  \item \Lpack{geometry}
+  \item \Lpack{sidecap}
+  \item \Lpack{subfigure}
+  \item \Lpack{titlesec}.
+  \end{lineitems}
+\end{center}
 %\end{itemize}
 You can use these packages 
 if you wish, or just use the capabilities of the \Mname\ class.
@@ -1666,6 +1749,22 @@
     The class has built in support for the \Lpack{bidi} package for 
 bidirectional typesetting~\cite{BIDI}.
 
+The following packages are automatically loaded by the class:
+\begin{center}
+  \begin{lineitems}
+    \Lpack{array}
+  \item \Lpack{dcolumn}
+  \item \Lpack{delarray}
+  \item \Lpack{etex}
+%  \item \Lpack{ifetex}
+%  \item \Lpack{ifxetex}
+%  \item \Lpack{ifpdf}
+%  \item \Lpack{ifluatex}
+    \item \Lpack{iftex}
+  \item \Lpack{tabularx}
+  \item \Lpack{textcase}~(with~\texttt{overload}~option)
+  \end{lineitems}
+\end{center}
 
 \section{Resources} \label{sec:resources}
 
@@ -1732,11 +1831,19 @@
 freely available from \pixctan\ if you wish to see exactly what it does
 and how it does it.
 
-    For a more interactive resource you can ask questions on the
-\url{comp.text.tex} newsgroup. If you are a newcomer to \pixctt\
-please read the FAQ~\cite{FAQ} before asking a question, and also read
-a few day's worth of messages to check that your question hasn't just
-been answered.
+For a more interactive resource you can ask questions on
+\begin{center}
+  \url{http://tex.stackexchange.com}.
+\end{center}
+-- if the question is \Mname\ related, please tag it so.
+
+
+
+%     For a more interactive resource you can ask questions on the
+% \url{comp.text.tex} newsgroup. If you are a newcomer to \pixctt\
+% please read the FAQ~\cite{FAQ} before asking a question, and also read
+% a few day's worth of messages to check that your question hasn't just
+% been answered.
 
 \section{Type conventions}
 
@@ -1887,7 +1994,8 @@
 % the maintainer at \texttt{daleif at math dot au dot dk}}
 \footnote{Please write the maintainer at \texttt{daleif at math dot au
     dot dk}} Along those lines, if you have any questions you may
-direct them to the \url{comp.text.tex} newsgroup or post them on
+%direct them to the \url{comp.text.tex} newsgroup or
+post them on
 \url{http://tex.stackexchange.com} as you are likely to get a
 satisfactory and timely response.
 
@@ -1929,11 +2037,12 @@
 \fancybreak{}
 
 As the years go by support for \Lclass{memoir} will devolve from one
-person to another.\footnote{This is currently (July 2009) happening as
-  Lars Madsen is taking over from Peter Wilson.}  Therefore it is
+person to another.\footnote{Lars Madsen took over from Peter Wilson in
+  2009.}  Therefore it is
 probably safer to ask questions, complain, make suggestions, etc., on
-a Q\&A site like \url{http://tex.stackexchange.com} or on the the
-newsgroup \url{comp.text.tex}, which is archived and read by many,
+a Q\&A site like \url{http://tex.stackexchange.com}%  or on the the
+% newsgroup \url{comp.text.tex}
+, which is archived and read by many,
 than correspond directly with the maintainer, who might well be away
 for some considerable time and perhaps not notice your email after
 having returned to base.
@@ -1945,12 +2054,11 @@
 
 \fancybreak{}
 
-\textit{From the maintainer:} It seems that traffic on
-\url{comp.text.tex} is less frequent. So most \theclass\ related
-questions should go to \url{http://tex.stackexchange.com}, please
-remember to tag them properly, that really helps locating the
-\theclass\ related questions. If no-one comes up with an answer, you
-can also write me directly via \texttt{daleif (at) math dot au dot dk}.
+\textit{From the maintainer:} Most \Mname\ related questions
+should go to \url{http://tex.stackexchange.com}, please remember to
+tag them properly, that really helps locating the \Mname\ related
+questions. If no-one comes up with an answer, you can also write me
+directly via \texttt{daleif (at) math dot au dot dk}.
 
 
 
@@ -2167,9 +2275,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2015-08-21 12:00:47 +0200 (Fri, 21 Aug 2015) $}
-{$LastChangedRevision: 544 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2020-02-19 15:38:41 +0100 (Wed, 19 Feb 2020) $}
+{$LastChangedRevision: 679 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 \chapter{Starting off} \label{chap:starting}
 
@@ -2195,6 +2303,8 @@
 \caption{Class stock metric paper size options, and commands}\label{tab:sizeoptsmetric}
 \begin{tabular}{llll} \toprule
 Option & Size & stock size command & page size command \\ \midrule
+\Lopt{a7paper}\index{paper!size!A7}\index{stock!size!A7} 
+   & \abybm{105}{74}{mm} & \cmd{\stockavii} & \cmd{\pageavii} \\
 \Lopt{a6paper}\index{paper!size!A6}\index{stock!size!A6} 
    & \abybm{148}{105}{mm} & \cmd{\stockavi} & \cmd{\pageavi} \\
 \Lopt{a5paper}\index{paper!size!A5}\index{stock!size!A5}
@@ -2203,6 +2313,8 @@
     & \abybm{297}{210}{mm} & \cmd{\stockaiv} & \cmd{\pageaiv} \\
 \Lopt{a3paper}\index{paper!size!A3}\index{stock!size!A3}
     & \abybm{420}{297}{mm} & \cmd{\stockaiii} & \cmd{\pageaiii} \\
+\Lopt{b7paper}\index{paper!size!B7}\index{stock!size!B7} 
+   & \abybm{125}{88}{mm} & \cmd{\stockbvii} & \cmd{\pagebvii} \\
 \Lopt{b6paper}\index{paper!size!B6}\index{stock!size!B6} 
    & \abybm{176}{125}{mm} & \cmd{\stockbvi} & \cmd{\pagebvi} \\
 \Lopt{b5paper}\index{paper!size!B5}\index{stock!size!B5} 
@@ -2433,8 +2545,10 @@
 \glossary(12ptco)%
   {\Popt{12pt}}%
   {Class option for a 12pt body font.}
-\item[\Lopt{14pt}] for 14pt as the normal type size
-\glossary(14ptco)%
+\item[\Lopt{14pt}] for 14pt as the normal type size\footnote{Note that
+    for \Lopt{14pt}, \cs{huge}, \cs{Huge} and \cs{HUGE} will be the
+    same as \cs{LARGE}, unless the \Lopt{extrafontsizes} option is
+    also is activated.}  \glossary(14ptco)%
   {\Popt{14pt}}%
   {Class option for a 14pt body font.}
 \item[\Lopt{17pt}] for 17pt as the normal type size
@@ -2469,7 +2583,14 @@
 \glossary(*ptco)%
   {\Popt{*pt}}%
   {Class option for an author-defined size for the body font.}
-\item[\Lopt{extrafontsizes}] Using scalable fonts that can exceed 25pt.
+\item[\Lopt{extrafontsizes}] Using scalable fonts that can exceed
+  25pt.
+
+  \emph{Note that this includes \cs{huge}, \cs{Huge} and \cs{HUGE}
+  under \Lopt{14pt}. For \Lopt{17pt} and up, an error is thrown if
+  used without \Lopt{extrafontsizes}, no error is given for
+  \Lopt{14pt}, there sizes above \cs{LARGE} will just be unavailable
+  unless \Lopt{extrafontsizes} is used.}
 \glossary(extrafontsizes)%
   {\Popt{extrafontsizes}}%
   {Class option for using scalable fonts that can exceed 25pt.}
@@ -2652,7 +2773,7 @@
   {Class option for printing trimming marks.}
 
 \end{itemize}
-
+%
     The defaults among the printing options\index{default!printing options} 
 are \Lopt{twoside}, \Lopt{onecolumn}, \Lopt{openright}, and \Lopt{final}.
 
@@ -2687,7 +2808,8 @@
 
 \item[\Lopt{article}]\index{class options!article} 
   typesetting \emph{simulates} the \Lclass{article} class,
-  but the \cmd{\chapter} command is not disabled.
+  but the \cmd{\chapter} command is not disabled, basically
+  \cmd{\chapter} will behave as if it was \cmd{\section}.
   Chapters\index{chapter} do not start a new page and chapter
   headings\index{heading!chapter} are typeset 
   like a section heading\index{heading!sections}. The numbering of 
@@ -2706,9 +2828,17 @@
   {\Popt{oldfontcommands}}%
   {Class option for permitting obsolete, deprecated font commands.}
 
-\end{itemize}
 
-    None of these options are defaulted.
+\item[\Lopt{fullptlayout}]\index{class options!layout truncation} 
+  disable point trunction of certain layout lengths, for example
+  \cmd{\textwidth}. The default is to round these of to a whole number
+  of points, this option disables this feature.
+  \glossary(fullptlayout)%
+  {\Popt{fullptlayout}}%
+  {Class option to disable point truncation of certain layout lengths.}
+\end{itemize}
+%
+None of these options are defaulted.
 
 \section{Remarks}
 
@@ -2777,8 +2907,8 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2015-11-23 09:32:30 +0100 (Mon, 23 Nov 2015) $}
-{$LastChangedRevision: 547 $}
+{$LastChangedDate: 2020-03-25 19:00:55 +0100 (Wed, 25 Mar 2020) $}
+{$LastChangedRevision: 686 $}
 {$LastChangedBy: daleif@math.au.dk $}
 
 \chapter{Laying out the page} \label{chap:layingpage}
@@ -3112,7 +3242,7 @@
 is 90\% of the stock size it's easy to get \ltx\ to do the calculation:
 \begin{lcode}
 \setlength{\trimtop}{\stockheight}    % \trimtop = \stockheight
-\addtolengh{\trimtop}{-\paperheight}  %          - \paperheight
+\addtolength{\trimtop}{-\paperheight}  %          - \paperheight
 \setlength{\trimedge}{\stockwidth}    % \trimedge = \stockwidth
 \addtolength{\trimedge}{-\paperwidth} %           - \paperwidth
 \end{lcode}
@@ -3125,8 +3255,8 @@
 
 \fancybreak{}
 
-See also section~\ref{sec:predefined-layouts} --
-\emph{\titleref{sec:predefined-layouts}}, where we present some extra
+See also section~\ref{sec:place-trimmed-page} --
+\emph{\titleref{sec:place-trimmed-page}}, where we present some extra
 commands. For example \cmd{\setpagecc} for placing a trimmed page
 centered on the stock.
 
@@ -3726,33 +3856,11 @@
   Readers may find several folio designs in \cite{MEMDESIGN}.
 \end{note}
 
+See also Section~\ref{sec:predefined-layouts}
+(\emph{\titleref{sec:predefined-layouts}}) for some predefined layouts.
 
 
-\fancybreak{}
 
-\begin{syntax}
-\cmd{\setcolsepandrule}\marg{colsep}\marg{thickness} \\
-\end{syntax}
-\glossary(setcolsepandrule)%
-  {\cs{setcolsepandrule}\marg{colsep}\marg{thickness}}%
-  {Sets the width of the gutter and the thickness of the rule in the gutter.}
-\glossary(columnsep)%
-  {\ls{columnsep}}%
-  {Width of the gutter between columns.}
-\glossary(columnseprule)%
-  {\ls{columnseprule}}%
- {Thickness of the rule in the gutter.}
-    For twocolumn\index{column!double} text the width of 
-the gutter\index{gutter}
-between the columns must be specified. \ltx\ also lets you draw a 
-vertical rule in the middle of the 
-gutter. The macro \cmd{\setcolsepandrule} 
-sets the gutter width\index{gutter!width}, \lnc{\columnsep}, to \meta{colsep} 
-and the thickness of the rule, \lnc{\columnseprule}, 
-to \meta{thickness}. A \meta{thickness} of 0pt means that the rule will be
-invisible. Visible rules usually have a thickness\index{rule!thickness} 
-of about 0.4pt. The total width of the twocolumns\index{column!double} 
-of text and the gutter equals the width of the typeblock\index{typeblock}.
 
     This completes the methods for specifying the layout of the
 main elements of the page --- the page\index{page!specifying size} 
@@ -3904,6 +4012,33 @@
 \section{Other}
 \label{sec:other}
 
+\begin{syntax}
+\cmd{\setcolsepandrule}\marg{colsep}\marg{thickness} \\
+\end{syntax}
+\glossary(setcolsepandrule)%
+  {\cs{setcolsepandrule}\marg{colsep}\marg{thickness}}%
+  {Sets the width of the gutter and the thickness of the rule in the gutter.}
+\glossary(columnsep)%
+  {\ls{columnsep}}%
+  {Width of the gutter between columns.}
+\glossary(columnseprule)%
+  {\ls{columnseprule}}%
+ {Thickness of the rule in the gutter.}
+    For twocolumn\index{column!double} text the width of 
+the gutter\index{gutter}
+between the columns must be specified. \ltx\ also lets you draw a 
+vertical rule in the middle of the 
+gutter. The macro \cmd{\setcolsepandrule} 
+sets the gutter width\index{gutter!width}, \lnc{\columnsep}, to \meta{colsep} 
+and the thickness of the rule, \lnc{\columnseprule}, 
+to \meta{thickness}. A \meta{thickness} of 0pt means that the rule will be
+invisible. Visible rules usually have a thickness\index{rule!thickness} 
+of about 0.4pt. The total width of the twocolumns\index{column!double} 
+of text and the gutter equals the width of the typeblock\index{typeblock}.
+
+
+\fancybreak{}
+
 
 \begin{syntax}
 \cmd{\setfootins}\marg{length for normal}\marg{length for minipage} \\
@@ -4175,6 +4310,23 @@
 made all the necessary changes. As an aid, the final layout parameter values
 are displayed on the terminal and written out to the log file.
 
+At the beginning of the document we will automatically add the
+page/stock sizes etc to the output such that viewers etc reacts
+accordingly. In incase you need to manually have the class rewrite
+these sizes to the document, you can use 
+
+\begin{syntax}
+\cmd{\refixpagelayout}\\
+\end{syntax}
+\glossary(refixpagelayout)%
+  {\cs{refixpagelayout}}%
+  {Command to reemit the document size to the output.}%
+Please note that this macro (and its name), may change in the
+future.\footnote{In a comming version, in later in 2020, we will
+  hopefully be able to support changing the stock and layout mid
+  document, like what is provided by the \Lpack{geometry}.}
+
+
 \LMnote{2010/09/17}{added \cs{\settypeoutlayoutunit}}
 \begin{syntax}
 \cmd{\typeoutlayout} \\
@@ -4235,59 +4387,71 @@
 ...
 \end{lcode}
 
-\section{Printing and viewing}
-  
-    When \pdfltx\ is used to generate a \pixpdf\ version of a \Pclass{memoir}
-document some special setup must be done.
-\begin{syntax}
-\cmd{\fixpdflayout} \\
-\end{syntax}
-\glossary(fixpdflayout)%
-  {\cs{fixpdflayout}}%
-  {Sets up page size information for \pdfltx.}
-The macro \cmd{\fixpdflayout}\index{page layout!PDF} is automatically called after the preamble when
-\pdfltx{} is used to generate \pixpdf. The default definition is effectively:
-\begin{lcode}
-\newcommand*{\fixpdflayout}{
-  \pdfpageheight=\the\stockheight
-  \pdfpagewidth=\the\stockwidth
-  \ifxetex\else
-  \ifdim\pdforigin=0pt\pdforigin=1in\fi
-  \ifdim\pdfhorigin=0pt\pdfhorigin=1in\fi
-  \fi}
-\end{lcode}
-The first settings (\verb?\pdfpage...?) ensure that \pdfltx{} knows
-the size of the physical sheet\indextwo{stock}{size} for printing. 
-The \verb?\...origin? settings
-set the \pdf{} origin per the \tx\ origin, provided that their values are
-0pt. If you have set the origin values yourself, either in a \pdfltx{} 
-configuration\index{configuration file} file or earlier in the preamble, 
-the \cmd{\fixpdflayout}
-macro will not alter them (if you need an origin value to be 0 then
-set it to 1sp, which is visually indistinguishable from 0pt).
-
-\begin{syntax}
-\cmd{\fixdvipslayout} \\
-\end{syntax}
-\glossary(fixdvipslayout)%
-  {\cs{fixdvipslayout}}%
-  {Sets up page size information for dvi processors.}
-
-The macro \cmd{\fixdvipslayout}\index{page layout!dvips} is automatically 
-called after the preamble 
-when \pixpdf{} output is not being produced. It provides the \Lprog{dvips} 
-processor
-with information about the stock\indextwo{stock}{size} size, 
-which a viewer or printer may use.
-
-The macros \cmd{\fixpdflayout} and \cmd{\fixdvipslayout} are
-automatically executed at the start of the document, in combinations
-that make the most sense (i.e., \cmd{\fixpdflayout} when using XeLaTeX
-or \pdfltx{} and \cmd{fixdvipslayout} for the rest.
+%\section{Printing and viewing}
+
+\section{Emitting the page size}
+\label{sec:emitting-page-size}
+
+At the start of the document the class will automatically emit the
+chosen stocksize to the output format (DVI or PDF).\footnote{In
+  earlier versions we had macros \cs{fixpdflayout} and
+  \cs{fixdvipslayout} that held some of the code needed to emit this
+  data. With the newer engines like LuaLaTeX, this became unfeasible
+  thus they we discontinued (their use now emit a warning).}
+
+
+%     When \pdfltx\ is used to generate a \pixpdf\ version of a \Pclass{memoir}
+% document some special setup must be done.
+% \begin{syntax}
+% \cmd{\fixpdflayout} \\
+% \end{syntax}
+% \glossary(fixpdflayout)%
+%   {\cs{fixpdflayout}}%
+%   {Sets up page size information for \pdfltx.}
+% The macro \cmd{\fixpdflayout}\index{page layout!PDF} is
+% \emph{automatically}\footnote{That is you do not need to.} called after the preamble when
+% \pdfltx{} is used to generate \pixpdf. The default definition is effectively:
+% \begin{lcode}
+% \newcommand*{\fixpdflayout}{
+%   \pdfpageheight=\the\stockheight
+%   \pdfpagewidth=\the\stockwidth
+%   \ifxetex\else
+%   \ifdim\pdforigin=0pt\pdforigin=1in\fi
+%   \ifdim\pdfhorigin=0pt\pdfhorigin=1in\fi
+%   \fi}
+% \end{lcode}
+% The first settings (\verb?\pdfpage...?) ensure that \pdfltx{} knows
+% the size of the physical sheet\indextwo{stock}{size} for printing. 
+% The \verb?\...origin? settings
+% set the \pdf{} origin per the \tx\ origin, provided that their values are
+% 0pt. If you have set the origin values yourself, either in a \pdfltx{} 
+% configuration\index{configuration file} file or earlier in the preamble, 
+% the \cmd{\fixpdflayout}
+% macro will not alter them (if you need an origin value to be 0 then
+% set it to 1sp, which is visually indistinguishable from 0pt).
+
+% \begin{syntax}
+% \cmd{\fixdvipslayout} \\
+% \end{syntax}
+% \glossary(fixdvipslayout)%
+%   {\cs{fixdvipslayout}}%
+%   {Sets up page size information for dvi processors.}
+
+% The macro \cmd{\fixdvipslayout}\index{page layout!dvips} is automatically 
+% called after the preamble 
+% when \pixpdf{} output is not being produced. It provides the \Lprog{dvips} 
+% processor
+% with information about the stock\indextwo{stock}{size} size, 
+% which a viewer or printer may use.
+
+% The macros \cmd{\fixpdflayout} and \cmd{\fixdvipslayout} are
+% automatically executed at the start of the document, in combinations
+% that make the most sense (i.e., \cmd{\fixpdflayout} when using XeLaTeX
+% or \pdfltx{} and \cmd{fixdvipslayout} for the rest.
 
 
-\LMnote{2015/02/23}{Next lines outcommented as I do not feel that this
-  kind of examples below in a manual like this}
+% \LMnote{2015/02/23}{Next lines outcommented as I do not feel that this
+%   kind of examples belong in a manual like this}
 
 %     With a \Lopt{landscape} document and using the processing route
 % \verb?latex -> dvips? the resulting \file{ps} \pscript{} file may appear 
@@ -4467,7 +4631,8 @@
 \begin{minipage}[b]{\pwlayi}
 \drawaspread{\pwlayii}{1.3}{1.62}{0.18}{1.13}{1.5}{0}
 \end{minipage}
-\caption{Default layout for letterpaper} \label{fig:pagefirstlay}
+\caption{Default layout for letterpaper}
+\label{fig:pagefirstlay}
 
 \begin{minipage}[b]{\pwlayi}
 \drawaspread{\pwlayii}{1.3}{1.19}{0.11}{1.5}{2}{0}
@@ -4557,7 +4722,8 @@
 \begin{lcode}
 \medievalpage[12]
 \end{lcode}
-Note that \meta{spine} must be an integer.
+Note that \meta{spine} must be an integer. See
+Figures~\ref{fig:pagefirstlay}--\ref{fig:pagelastlay}.
 
 \begin{syntax}
 \cmd{\isopage}\oarg{spine} \\
@@ -4595,12 +4761,30 @@
 through \ref{fig:pagelastlay}. These were produced with the aid of the
 \Lpack{layouts} package.
 
-\fancybreak{}
+
+\section{Place trimmed page on the stock}
+\label{sec:place-trimmed-page}
+
+As mentined earlier, when the resulting paper size is smaller than the
+stock that it is printed on, you'll need to specify the trimmed size
+(the resulting paper size) using \cmd{\settrimmedsize} and you'll want
+to position that in relation to the stock using \cmd{\settrims}. 
+
+There are nine common layouts, so we made nine easy tro use
+macros. The take the same arguments as \cmd{\settrimmedsize} and then
+automatically add an appropriate \cmd{\settrims}.
+
 
 \begin{syntax}
-\cmd{\setpagebl}\marg{height}\marg{width}\marg{ratio} \\
-\cmd{\setpageml}\marg{height}\marg{width}\marg{ratio} \\
-\cmd{\setpagetl}\marg{height}\marg{width}\marg{ratio} \\
+\cmd{\setpagetl}\marg{height}\marg{width}\marg{ratio}  (top-left) \\
+\cmd{\setpagetm}\marg{height}\marg{width}\marg{ratio} (top-middle)\\
+\cmd{\setpagetr}\marg{height}\marg{width}\marg{ratio}  (top-right)\\
+\cmd{\setpagebl}\marg{height}\marg{width}\marg{ratio} (bottom-left)\\
+\cmd{\setpagebm}\marg{height}\marg{width}\marg{ratio} (bottom-middle)\\
+\cmd{\setpagebr}\marg{height}\marg{width}\marg{ratio} (bottom-right) \\
+\cmd{\setpageml}\marg{height}\marg{width}\marg{ratio} (middle-left) \\
+\cmd{\setpagecc}\marg{height}\marg{width}\marg{ratio} (center, alias \cmd{\setpagemm}) \\
+\cmd{\setpagemr}\marg{height}\marg{width}\marg{ratio}  (middle-right)\\
 \end{syntax}
 \glossary(setpagebl)%
   {\cs{setpagebl}\marg{height}\marg{width}\marg{ratio}}%
@@ -4613,42 +4797,7 @@
 \glossary(setpagebl)%
   {\cs{setpagetl}\marg{height}\marg{width}\marg{ratio}}%
   {Specifies a page of the given dimensions positioned at the top left
-   of the stock; see \cs{settrimmedsize}.}
-When your page is smaller than the stock it has to be positioned on
-the stock by specifying the trims to give the desired size and location.
-The macro \cmd{\setpagebl}, which takes the same arguments as 
-\cmd{\settrimmedsize} (see \tref{tab:rectsize} on \pref{tab:rectsize}),
-calculates the trims so that the page is located at the bottom left of
-the stock. Similarly \cmd{\setpageml} and \cmd{\setpagetl} will locate
-the page at the middle left and the top left, respectively, of the stock.
-For instance, if you are using letterpaper stock but want the final trimmed
-page size to be A5, then this will put page area at the bottom left of the
-stock.
-\begin{lcode}
-\pagebv % sets page height and width for A5 paper
-\setpagebl{\paperheight}{\paperwidth}{*}
-...
-\checkandfixthelayout
-\end{lcode}
-The above macros position the page at the left of the stock because usually 
-trimming of the stock is limited to the top, right, and bottom, the left 
-being the spine when the pages are finally assembled. To reposition the page to
-the center of the stock the following will halve the top and edge
-trims.
-\begin{lcode}
-\settrims{0.5\trimtop}{0.5\trimedge}
-...
-\checkandfixthelayout
-\end{lcode}
-
-\begin{syntax}
-\cmd{\setpagetm}\marg{height}\marg{width}\marg{ratio} \\
-\cmd{\setpagetr}\marg{height}\marg{width}\marg{ratio} \\
-\cmd{\setpagemr}\marg{height}\marg{width}\marg{ratio} \\
-\cmd{\setpagebr}\marg{height}\marg{width}\marg{ratio} \\
-\cmd{\setpagebm}\marg{height}\marg{width}\marg{ratio} \\
-\cmd{\setpagecc}\marg{height}\marg{width}\marg{ratio} \\
-\end{syntax}
+    of the stock; see \cs{settrimmedsize}.}
 \glossary(setpagetm)%
   {\cs{setpagetm}\marg{height}\marg{width}\marg{ratio}}%
   {Specifies a page of the given dimensions positioned at the top middle
@@ -4672,17 +4821,125 @@
 \glossary(setpagecc)%
   {\cs{setpagecc}\marg{height}\marg{width}\marg{ratio}}%
   {Specifies a page of the given dimensions positioned at the center
-   of the stock; see \cs{settrimmedsize}.}
+    of the stock; see \cs{settrimmedsize}.}
+
+  \noindent
+Note: Always remember to combine this with \cmd{\checkandfixthelayout}!
+  
+  
+% When your page is smaller than the stock it has to be positioned on
+% the stock by specifying the trims to give the desired size and location.
+% The macro \cmd{\setpagebl}, which takes the same arguments as 
+% \cmd{\settrimmedsize} (see \tref{tab:rectsize} on \pref{tab:rectsize}),
+% calculates the trims so that the page is located at the bottom left of
+% the stock. Similarly \cmd{\setpageml} and \cmd{\setpagetl} will locate
+% the page at the middle left and the top left, respectively, of the
+% stock.
+
+\goodbreak
+ 
+ \noindent
+For instance, if you are using letterpaper stock but want the final trimmed
+page size to be A5, then this will put page area at the bottom left of the
+stock.
+\begin{lcode}
+% letterpaper stock added via class option  
+\pagebv % sets \paperheight and \paperwidth for A5 paper
+\setpagebl{\paperheight}{\paperwidth}{*}
+...
+\checkandfixthelayout
+\end{lcode}
+The above macros position the page at the left of the stock because usually 
+trimming of the stock is limited to the top, right, and bottom, the left 
+being the spine when the pages are finally assembled.
+
+
+% To reposition the page to
+% the center of the stock the following will halve the top and edge
+% trims.
+% \begin{lcode}
+% \settrims{0.5\trimtop}{0.5\trimedge}
+% ...
+% \checkandfixthelayout
+% \end{lcode}
+
+% \begin{syntax}
+% \end{syntax}
+
+%     The commands \cmd{\setpagetm}, \cmd{\setpagetr}, \cmd{\setpagemr},
+% \cmd{\setpagebr}, \cmd{\setpagebm}, \cmd{\setpagecc} are analagous to the
+% earlier ones and they set a page at the top middle, top right, middle right,
+% bottom right, bottom middle and centered with respect to the stock.
+
+
+% Remember that after you have finished defining the layout you want you
+% have to call \cmd{\checkandfixthelayout} for all the changes to take
+% effect.
+
+% \fancybreak{}
+
+In Figure~\ref{fig:setpage} we show the effect of the nine
+\cmd{\setpageXX}. The code used for the examples is similar to the
+code below, and then the result was scaled down.
+
+\begin{lcode}
+\documentclass[showtrims]{memoir}
+\trimLmarks
+\setstocksize{18cm}{15cm}
+\setpagebl{16cm}{12cm}{*}
+\setlrmarginsandblock{15mm}{15mm}{*}
+\setulmarginsandblock{15mm}{15mm}{*}
+\setheadfoot{5mm}{5mm}
+\checkandfixthelayout[fixed]
+\pagestyle{empty}
+\AtBeginDocument{\LARGE}
+\begin{document}
+\begin{vplace}
+  \centering
+  \cs{setpagebl}\marg{height}\marg{width}\marg{ratio}
+\end{vplace}
+\end{document}
+\end{lcode}
+
+
+
+
+\begin{figure}[htbp]
+  \centering
+  \fboxsep=0pt
+  \fbox{\includegraphics[page=1,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=2,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=3,scale=0.3]{setpage-example.pdf}}
+
+  \medskip
+  
+  \fbox{\includegraphics[page=4,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=5,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=6,scale=0.3]{setpage-example.pdf}}
+
+  \medskip
+
+  
+  \fbox{\includegraphics[page=7,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=8,scale=0.3]{setpage-example.pdf}}
+  \hfill
+  \fbox{\includegraphics[page=9,scale=0.3]{setpage-example.pdf}}
+
+  \caption{Example of the nine \cs{setpageXX} macros for placing
+    a trimmed page on the stock. These are all odd pages, under
+    \Lopt{twoside}, even pages will have the left/right trims
+    reversed. The outer fra indicate the stock size. Inside the trim
+    marks hint at where the page is positioned on the stock.}
+  \label{fig:setpage}
+\end{figure}
 
-    The commands \cmd{\setpagetm}, \cmd{\setpagetr}, \cmd{\setpagemr},
-\cmd{\setpagebr}, \cmd{\setpagebm}, \cmd{\setpagecc} are analagous to the
-earlier ones and they set a page at the top middle, top right, middle right,
-bottom right, bottom middle and centered with respect to the stock.
 
 
-Remember that after you have finished defining the layout you want you
-have to call \cmd{\checkandfixthelayout} for all the changes to take
-effect.
 
 
 %#% extend
@@ -4690,9 +4947,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2014-03-31 11:34:44 +0200 (Mon, 31 Mar 2014) $}
-{$LastChangedRevision: 480 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2020-03-25 19:00:55 +0100 (Wed, 25 Mar 2020) $}
+{$LastChangedRevision: 686 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 
 \chapter{Text and fonts}
@@ -5165,7 +5422,7 @@
 for a reasonable effect, as in example~\ref{eg16}.
 \begin{egsource}{eg16}
 \begin{center}
-\textsc{Des Dames du Temps Jardis}
+\textsc{Des Dames du Temps Jadis}
 \end{center}%
 \settowidth{\versewidth}{Or yet in a year where they are}
 \begin{verse}[\versewidth] \begin{itshape}
@@ -5187,7 +5444,7 @@
 
 \begin{egresult}[Sometimes mixed fonts work]{eg16}
 \begin{center}
-\textsc{Des Dames du Temps Jardis}
+\textsc{Des Dames du Temps Jadis}
 \end{center}%
 \settowidth{\versewidth}{Or yet in a year where they are}
 \begin{verse}[\versewidth] \begin{itshape}
@@ -5565,11 +5822,17 @@
 
 \PWnote{2009/06/24}{Corrected \cs{SetSingleSpace} to \cs{setSingleSpace}}
 \begin{syntax}
-\cmd{\SingleSpacing} \cmd{\setSingleSpace}\marg{factor} \\
+  \cmd{\SingleSpacing}\\
+  \cmd{\SingleSpacing*}\\
+  \cmd{\setSingleSpace}\marg{factor} \\
 \end{syntax}
 \glossary(SingleSpacing)%
   {\cs{SingleSpacing}}%
-  {Declaration restoring normal single spacing (or that set by \cs{setSingleSpace}).}
+  {Declaration restoring normal single spacing (or that set by
+    \cs{setSingleSpace}). Note, this added a skip at the end.}
+\glossary(SingleSpacing*)%
+  {\cs{SingleSpacing*}}%
+  {Same as \cs{SingleSpacing}, but does not add a skip at the end.}
 \glossary(setSingleSpace)%
   {\cs{setSingleSpace}\marg{factor}}%
   {Change the baselineskip by \meta{factor}.}
@@ -5584,6 +5847,20 @@
 least the setting from \cmd{\setSingleSpace} if it has been used. It
 will also reset float and page note spacings to the same value.
 
+\begin{note}
+  \sloppy
+  \cmd{\SingleSpacing} will also issue a
+  \cmd{\vskip}\cmd{\baselineskip} at the end (which is ignored if
+  \cmd{\SingleSpacing} is used in the preamble). This skip makes sure
+  that comming from \cmd{\DoubleSpacing} to \cmd{\SingleSpacing} still
+  looks ok.
+
+  But in certain cases, this skip is unwanted. Therefore as of 2018 we
+  added a \cmd{\SingleSpacing*} that is equal to \cmd{\SingleSpacing}
+  but \emph{does not} add this skip.
+\end{note}
+
+
 \begin{syntax}
 \senv{SingleSpace} ...\eenv{SingleSpace} \\
 \senv{Spacing}\marg{factor} ... \eenv{Spacing} \\
@@ -5660,6 +5937,9 @@
 may need to use the \Ie{vminipage} environment instead to get the before and
 after spacing correct.
 
+\index{double spacing|)}
+
+
 
 \section{Overfull lines}
 
@@ -5824,15 +6104,39 @@
 \label{sec:text-case}
 
 The standard kernel \cmd{\MakeUppercase}\marg{text} and
-\cmd{\MakeLowercase}\marg{text} 
-basically upper or lower case everything it can get its hands on. This
-is not particularly nice if the \meta{text} contain, say, math.
-
-In order to help with this we provide the \cmd{\MakeTextUppercase} and
-\cmd{\MakeTextLowercase} macros from the \Lpack{textcase} package
-(\cite{textcase}) by David Carlisle. The following is DCs own
-documentation of the provided code changed to match the typography we
-use.
+\cmd{\MakeLowercase}\marg{text} basically upper or lower case
+everything it can get its hands on. This is not particularly nice if
+the \meta{text} contain, say, math.
+
+In order to help with this we load the \Lpack{textcase} package
+(\cite{textcase}) by David Carlisle (with the \texttt{overload}
+option) which provide the \cmd{\MakeTextUppercase} and
+\cmd{\MakeTextLowercase} macros.\footnote{Overload causes the original
+  \cmd{\MakeUppercase} and \cmd{\MakeLowercase} to be copies of
+  \cmd{\MakeTextUppercase} and \cmd{\MakeTextLowercase}.}
+
+
+\begin{caveat}
+  This change was made in October 2019, earlier we embedded a copy of
+  \texttt{textcase} into the class it self. Now we check to see of you
+  have a copy and use that, if found, if not we use our old embedded
+  copy.
+
+  If, for some reason, you want the original \cmd{\MakeUppercase} and
+  \cmd{\MakeLowercase} macros back, add
+\begin{syntax}
+  \cmd{\MemRestoreOrigMakecase}
+\end{syntax}
+to your preamble.
+\end{caveat}
+
+
+The following is DCs own documentation of the provided code changed to
+match the typography we use.\footnote{Note: This documentation will
+  probably be removed in a future version and replaced by a summary
+  and a reference to \cite{textcase}.}
+
+
 
 \fancybreak{}
 
@@ -6004,9 +6308,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2013-04-24 17:14:15 +0200 (Wed, 24 Apr 2013) $}
-{$LastChangedRevision: 442 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2018-03-06 15:58:01 +0100 (Tue, 06 Mar 2018) $}
+{$LastChangedRevision: 584 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 
 \chapter{Titles}
@@ -6339,15 +6643,21 @@
 
 \begin{syntax}
 \senv{titlingpage} text \eenv{titlingpage} \\
-\senv{titlingpage*} text \eenv{titlingpage*} 
+\senv{titlingpage*} text \eenv{titlingpage*}\\
+\cmd{\titlingpageend}\marg{twoside code}\marg{oneside code} 
 \end{syntax}
 \glossary(titlingpage)%
   {\senv{titlingpage}}%
   {Environment for a title page, resets the page counter to 1 after it}
 \glossary(titlingpage*)%
   {\senv{titlingpage*}}%
-  {Like \senv{titlingpage}, but does not reset the page counter.}
-   When one of the standard classes is used with the \Lopt{titlepage}
+  {Like \senv{titlingpage}, but does not reset the page counter.}%
+\glossary(titlingpageend)%
+  {\cs{titlingpageend}}%
+  {Can be used to set what kind of page clearing is issued at the end
+    of a titling page. The default for the two args are
+    \cs{cleardoublepage} and \cs{clearpage}.}
+When one of the standard classes is used with the \Lopt{titlepage}
 option, \cmd{\maketitle} puts the title elements on an unnumbered page
 and then starts a new page numbered page 1. 
 The standard classes also provide
@@ -6368,6 +6678,19 @@
 The \pstyle{titlingpage} pagestyle is initially defined to be the same
 as the \pstyle{empty} pagestyle.
 
+At the end of a \Ie{titlingpage} clearing code is issued, which can
+send you to the next page or the next right handed page. Using
+\cmd{\titlingpageend}\marg{twoside code}\marg{oneside code}, you can
+specify what this clearing code should be. The default is
+\cs{cleardoublepage} and \cs{clearpage} respectively.\footnote{Thus
+  this refactorization will not change existing documents, LM, 2018/03/06.} However a
+better choice might be to just let it follow \cs{clearforchapter}:
+\begin{lcode}
+  \titlingpageend{\clearforchapter}{\clearforchapter}
+\end{lcode}
+-- using this value, \Ie{titlingpage} will work as expected with \Lopt{openany}.
+
+
    For example, to put both the title and an abstract\index{abstract} 
 on a title page,
 with a \pstyle{plain} pagestyle:
@@ -6856,9 +7179,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2014-03-31 11:34:44 +0200 (Mon, 31 Mar 2014) $}
-{$LastChangedRevision: 480 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2019-10-22 18:09:22 +0200 (Tue, 22 Oct 2019) $}
+{$LastChangedRevision: 652 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 \chapter{Abstracts}
 
@@ -7003,6 +7326,23 @@
 The default values depend on whether or not the \Lopt{twocolumn}
 class option is used. The general layout parameters for lists are illustrated
 in \fref{fig:listlay}.
+\begin{caveat}
+  The default values for \cmd{\absparindent} and \cmd{\absparsep} are
+  \cmd{\parindent} and \cmd{\parskip}. But, since users may change
+  these values in the preamble, we delay setting \cmd{\absparindent}
+  and \cmd{\absparsep} to the beginning of the document. Thus if you
+  want to change these values remember to use
+\begin{verbatim}
+\AtBeginDocument{
+  \setlength{\absparindent}{...}
+  \setlength{\absparsep}{...}
+}
+\end{verbatim}
+
+\end{caveat}
+
+
+
 
 \begin{syntax}
 \cmd{\abslabeldelim}\marg{text} \\
@@ -7050,15 +7390,17 @@
 \lnc{\abstitleskip} is typeset
 before the heading. For example, if \lnc{\absparindent} is non-zero, then:
 \begin{lcode}
-\setlength{\abstitleskip}{-\absparindent}
+\AtBeginDocument{
+  \setlength{\abstitleskip}{-\absparindent}
+}
 \end{lcode}
- will typeset the heading flush left.
-
-Without the \cmd{\abstractrunin} declaration, \lnc{\abstitleskip} is 
-aditional vertical 
-space (either positive
-or negative) that is inserted between the abstract name and the text of
-the abstract.
+will typeset the heading flush left (we have to delay as the value of
+\cmd{\absparindent} is zero in the preamble and is set at the start of
+the doc).
+
+Without the \cmd{\abstractrunin} declaration, \lnc{\abstitleskip} is
+aditional vertical space (either positive or negative) that is
+inserted between the abstract name and the text of the abstract.
 
 \index{abstract!styling|)}
 
@@ -7127,9 +7469,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2015-07-17 12:08:47 +0200 (Fri, 17 Jul 2015) $}
-{$LastChangedRevision: 541 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2019-11-04 16:13:21 +0100 (Mon, 04 Nov 2019) $}
+{$LastChangedRevision: 658 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %   chapter style
@@ -7630,6 +7972,15 @@
 The commands \cmd{\mainmatter} and \cmd{\mainmatter*} set the
 numbering level to the value specified by \cmd{\maxsecnumdepth}.
 
+\begin{hint}
+  One will often set \cmd{\setsecnumdepth} in the preamble and then
+  wonder why it didn't do anything. That is probably because of
+  \cmd{\frontmatter} and \cmd{mainmatter}, so make it a habit of
+  setting them both like above.
+\end{hint}
+
+
+
     The number setting commands come from the \Lpack{tocvsec2}
 package~\cite{TOCVSEC2}.
 
@@ -9239,6 +9590,19 @@
 \setsubsubsecheadstyle{\normalfont\centering\MakeUppercase}
 \end{lcode}
 
+\fancybreak{$***$}
+
+Under very special circumstances, one might want to get completely rid
+of the sectional header (for example, if you are using a very small
+paper size, and you are placing the section information in the header
+instead), by creating a macro that takes on argument and ignores it
+\begin{lcode}
+  \newcommand\ignoreMe[1]{}
+  \setsecheadstyle{\ignoreMe}
+\end{lcode}
+
+\fancybreak{$***$}
+
     As another example, although I don't recommend this, you can draw a
 horizontal line under section titles via:
 \begin{lcode}
@@ -9324,10 +9688,13 @@
 \glossary(setsecnumformat)%
   {\cs{setsecnumformat}\marg{code}}%
   {Redefines \cs{@seccntformat} to \meta{code}.}
-Internally all the titling macros use a kernel macro called 
+Internally all the titling macros like \cmd{\section},
+\cmd{\subsection} etc. use a kernel macro called 
 \cmd{\@seccntformat} 
 which defines the formatting of sectional numbers in a title. Its
-default definition (in file \file{ltsect.dtx}) is effectively:
+default definition (in file \file{ltsect.dtx}) is
+effectively:\footnote{Because they all internally use the
+\cmd{\@startsection} macro.}
 \begin{lcode}
 \newcommand{\@seccntformat}[1]{\csname the#1\endcsname\quad}
 \end{lcode}
@@ -9552,7 +9919,22 @@
   \newcommand\subsectionsecnumformat{\fbox{\enspace\thesubsection\enspace}\enspace}
 \end{lcode}
 Since the macro is only called in the proper context, we can use
-\cmd{\thesection} directly in the code for \cmd{\section}.
+\cmd{\thesection} directly in the code for \cmd{\section}. However,
+this requires you to define formatting macros for all sectional
+headings. Here is how to reverse it, that is see if a format exists,
+use it, otherwise use a default:
+\begin{lcode}
+  \makeatletter
+  \setsecnumformat{%
+    \@ifundefined{#1secnumformat}{% nope, use a default
+      \csname the#1\endcsname\quad%
+    }{%
+      \csname #1secnumformat\endcsname%
+    }%
+  }
+\makeatother
+\end{lcode}
+
 
 
 
@@ -10000,9 +10382,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2014-08-22 09:08:19 +0200 (Fri, 22 Aug 2014) $}
-{$LastChangedRevision: 498 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2019-11-11 16:55:48 +0100 (Mon, 11 Nov 2019) $}
+{$LastChangedRevision: 661 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 \chapterstyle{demo3}
 
@@ -10059,6 +10441,26 @@
 of numbers irrespective of their displayed form, which is where
 the starred version comes in handy.
 
+\begin{hint}
+  If you are using \Lpack{hyperref} and include a title page, the
+  following setup might be useful
+  \begin{lcode}
+\pagenumbering{Alpha}
+\begin{titlingpage}
+  ...
+\end{titlingpage}
+\frontmatter
+... % this has roman numbering
+\mainmatter
+... % this has arabic numbering
+\end{lcode}
+The code has the advantage that \Lpack{hyperref} does not warn that
+the page anchors for pages 1 and 2 are already defined (the
+\Ie{titlingpage} env does not show the A, B page numbers).
+\end{hint}
+
+
+
 \begin{syntax}
 \cmd{\savepagenumber} \\
 \cmd{\restorepagenumber} \\
@@ -10227,10 +10629,11 @@
 is \cmd{\uppercaseheads} which specifies that the titles are to be
 automatically uppercased.
 
-\textbf{Change 2012:} The upper casing macro used by \cmd{\uppercaseheads} has
-been changed into \cmd{\MakeTextUppercase} such that the upper casing
-does not touch math, references or citations.
-
+\begin{note*}{Change 2012} The upper casing macro used by
+  \cmd{\uppercaseheads} has been changed into \cmd{\MakeTextUppercase}
+  (from the \Lpack{textcase} package) such that the upper casing does
+  not touch math, references or citations.
+\end{note*}
 
     For the \pstyle{myheadings} pagestyle above, you have to define your own
 titles to go into the header\index{header}. Each sectioning command, 
@@ -10342,8 +10745,8 @@
 the \pstyle{plain} pagestyle is defined as
 \begin{lcode}
 \makepagestyle{plain}
-  \makeevenfoot{plain}{}{\thepage}{}
-  \makeoddfoot{plain}{}{\thepage}{}
+\makeevenfoot{plain}{}{\thepage}{}
+\makeoddfoot{plain}{}{\thepage}{}
 \end{lcode}
 which centers the page number at the bottom of the page. 
     
@@ -10537,11 +10940,12 @@
    setting any marks.}
 The last thing that the \cmd{\pagestyle}\marg{style} does is call the
 \meta{code} argument of the \cmd{\makepsmarks} macro for \meta{style}.
-This is normally used for specifying non-default code 
-(i.e., code not specifiable via any of the previous macros) for the 
-particular pagestyle. The code normally defines the marks, if any, 
-that will be used in
-the headers\index{header} and footers\index{footer}.
+If specified, this code will often redefine the various macros that
+provide the automated data for the headers (or footers). For example
+how \cmd{\chapter} makes the title and chapter number avaialble for
+the header. If no \meta{code} is specified (or \cmd{\makepsmarks} is
+not setup for this \meta{style}, the providing macros already active
+will be used.
 
 \LMnote{2010/06/25}{Added a mentioning of \cs{makeheadfootstrut}}
 \begin{syntax}
@@ -10554,6 +10958,211 @@
 are empty). One can use the macro above to change these struts to
 something different.
 
+\fancybreak{$***$}
+
+\LMnote{2019/11/07}{Moved the explanation for \cmd{createmark} and
+  friends}
+
+Writing the \meta{code} part for \cmd{\makepsmarks} can be very
+daunting, as you will be needing to define most of the macros listed
+in Table~\ref{tab:markmacros}
+
+However, most uses are very similar, so we have provided some helper
+macros:
+\begin{syntax}
+\cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix} \\
+\cmd{\createplainmark}\marg{type}\marg{marks}\marg{text} \\
+\cmd{\memUChead}\marg{text} \\
+\cmd{\uppercaseheads} \cmd{\nouppercaseheads} \\
+\end{syntax}
+\glossary(createplainmark)%
+  {\cs{createplainmark}\marg{type}\marg{marks}\marg{text}}%
+  {Defines the \cs{typemark} macro using \meta{text} as the mark, where
+  \meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}.}
+\glossary(createmark)%
+  {\cs{createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}}%
+  {Defines the \cs{secmark} macro where \meta{show} (\texttt{shownumber} 
+   or \texttt{nonumber}) controls whether the division number will be
+   displayed within \cs{mainmatter}, \meta{marks} is \texttt{left}, 
+   \texttt{both} or \texttt{right}, and \meta{prefix} and \meta{postfix}
+   are affixed before and after the \meta{sec} (division) number.}
+\glossary(memUChead)%
+  {\cs{memUChead}\marg{text}}%
+  {May uppercase \meta{text}, depending on \cs{uppercaseheads} and
+  \cs{nouppercaseheads}.}
+\glossary(uppercaseheads)%
+  {\cs{uppercaseheads}}%
+  {Defines \cs{memUChead} as equivalent to \cs{MakeUppercase}.}
+\glossary(nouppercaseheads)%
+  {\cs{nouppercaseheads}}%
+  {Defines \cs{memUChead} as \cs{relax} (i.e., do nothing).}
+
+\noindent
+The macro \cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}
+defines a new macro \verb?\<sec>mark? that will take one argument, where
+\begin{description}
+  \item[\meta{marks}] is either \texttt{left}, \texttt{right} or \texttt{both},
+\item[\meta{sec}] is a sectional division
+    such as \texttt{part}, \texttt{chapter}, \texttt{section}, etc.,
+\item[\meta{show}] is one of the terms \texttt{shownumber}, \texttt{nonumber} or
+  \texttt{notitle}. They control what is available in the provided
+  header text. The terms \texttt{shownumber}, \texttt{nonumber}
+  control whether the number is displayed within \cmd{\mainmatter}
+  (under \cmd{\frontmatter} no numbers are displayed.
+  
+  The term \texttt{notitle} (which implies \texttt{shownumber}) will
+  only show the number part (including the \meta{postfix} and
+  \meta{prefix} parts described below) and \emph{no} title.
+
+\item[\meta{pre-/postfix}] are affixed before and after the division number.
+\end{description}
+For example:
+\begin{lcode}
+\createmark{section}{left}{nonumber}{}{}
+\createmark{section}{both}{nonumber}{}{}
+\createmark{section}{right}{nonumber}{}{}
+\end{lcode}
+is equivalent to, respectively
+\begin{lcode}
+\def\sectionmark#1{\markboth{\memUChead{#1}}{}}
+\def\sectionmark#1{\markboth{\memUChead{#1}}{\memUChead{#1}}}
+\def\sectionmark#1{\markight{\memUChead{#1}}}
+\end{lcode}
+whereas 
+\begin{lcode}
+\createmark{section}{left}{shownumber}{}{}
+\end{lcode}
+is equivalent to the following pseudo code
+\begin{lcode}
+\def\sectionmark#1{\markboth{
+  \memUChead{
+    if secnumdepth > number:
+      if mainmatter:
+        prefix \thesection postfix
+      fi
+    fi
+    #1% aka the section title  
+  }
+}{}}
+\end{lcode}
+and 
+\begin{lcode}
+\createmark{section}{left}{notitle}{}{}
+\end{lcode}
+is equivalent to the following pseudo code
+\begin{lcode}
+\def\sectionmark#1{\markboth{
+  \memUChead{
+    if secnumdepth > number:
+      if mainmatter:
+        prefix \thesection postfix
+      fi
+    fi
+  }
+}{}}
+\end{lcode}
+
+\fancybreak{}
+
+The macro \cmd{\createplainmark} defines the \verb?\<type>mark?, where 
+\meta{type} is an unnumbered division-like head, such as \texttt{toc},
+\texttt{lof}, \texttt{index}, using \meta{text} as the mark value, and 
+\meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}. For example:
+\begin{lcode}
+\createplainmark{toc}{left}{\contentsname}
+\createplainmark{lot}{right}{\listtablename}
+\createplainmark{bib}{both}{\bibname}
+\end{lcode}
+is equivalent to
+\begin{lcode}
+\def\tocmark{\markboth{\memUChead{\contentsname}}{}}
+\def\lotmark{\markright{\memUChead{\listtablename}}}
+\def\lofmark{\markboth{\memUChead{\bibname}}{\memUChead{\bibname}}}
+\end{lcode}
+
+\fancybreak{}
+
+Lastly the macro \cmd{\memUChead} is an internal macro handling the
+upper- or non-uppercasing. Its definition is usually controlled using
+\cmd{\uppercaseheads} which sets \cmd{\memUChead} to
+\cmd{\MakeTextUppercase} (from \Lpack{textcase}) whereas
+\cmd{\nouppercaseheads} defines it to output the argument
+unchanged. The class default is \cmd{\uppercaseheads}.
+
+\fancybreak{}
+
+The class' default page style is \pstyle{headings}, which has the
+following setup for \cmd{\makepsmarks} (slight pseudocode):
+\begin{lcode}
+if twopage setup:
+  \makepsmarks{headings}{%
+    \createmark{chapter}{left}{shownumber}{\@chapapp\ }{. \ }
+    \createmark{section}{right}{shownumber}{}{. \ }
+    \createplainmark{toc}{both}{\contentsname}
+    \createplainmark{lof}{both}{\listfigurename}
+    \createplainmark{lot}{both}{\listtablename}
+    \createplainmark{bib}{both}{\bibname}
+    \createplainmark{index}{both}{\indexname}
+    \createplainmark{glossary}{both}{\glossaryname}
+  }
+else: % aka oneside
+  \makepsmarks{headings}{%
+    \createmark{chapter}{right}{shownumber}{\@chapapp\ }{. \ }
+    \createplainmark{toc}{right}{\contentsname}
+    \createplainmark{lof}{right}{\listfigurename}
+    \createplainmark{lot}{right}{\listtablename}
+    \createplainmark{bib}{right}{\bibname}
+    \createplainmark{index}{right}{\indexname}
+    \createplainmark{glossary}{right}{\glossaryname}
+  }
+fi
+\end{lcode}
+Where \cmd{\@chapapp} is a special macro what equals
+\cmd{\chaptername} unless \cmd{\appendix} is active, where it is then
+equal to \cmd{\appendixname}.
+
+Note how the twosided setup only include marks for \cmd{\chapter} and
+\cmd{\section} and onesided only for \cmd{\chapter}.
+
+\fancybreak{}
+
+So what if we wanted to add support for \cmd{\subsection} to an
+already defined page style? Use this:
+\begin{syntax}
+\cmd{\addtopsmarks}\marg{pagestyle}\marg{prepend}\marg{append} \\
+\end{syntax}
+\glossary(addtopsmarks)%
+  {\cs{addtopsmarks}\marg{pagestyle}\marg{prepend}\marg{append}}%
+  {Inserts \meta{prepend} and \meta{append} before and after the current
+   definition of \cs{makepsmarks} for \meta{pagestyle}.}
+Here \meta{prepend} and \meta{append} is inserted
+\emph{before} and \emph{after} the current definition of \cs{makepsmarks} 
+for \meta{pagestyle}. So to answer our question we could use
+\begin{lcode}
+\addtopsmarks{headings}{}{%
+  \createmark{subsection}{right}{shownumber}{}{. \space}}
+\pagestyle{headings}
+\end{lcode}
+-- always remember to activate the page style afterwards.
+
+
+\fancybreak{}
+
+\LMnote{2010/02/08}{fixed typo}
+
+When the class runs the marks part of page style, it does not zero out
+old marks, i.e.\ if an old \cmd{\sectionmark} exist, it still exist
+even if we do not change it.  This is both a good and a bad thing. To
+help users redefine these marks to doing nothing we provide
+\begin{syntax}
+\cmd{\clearplainmark}\marg{type}\\
+\cmd{\clearmark}\marg{type}\\  
+\end{syntax}
+The used types are the same as for \cmd{\createplainmark} and \cmd{\createmark}.
+
+
+
+
 
 \subsection{Example pagestyles}
 
@@ -10578,9 +11187,12 @@
 margin. If any \pstyle{empty} pages should be marked as well, specify
 similar footers for that style as well.
 
+\fancybreak{}
+
+
     Here is part of the standard definition of the \pstyle{headings}
 pagestyle for the \Lclass{book} class which uses many internal \ltx\ commands;
-but note that \Mname\ does not use this.
+but note that the class does not use this!
 \begin{lcode}
 \def\ps@headings{%
   \let\@oddfoot\@empty\let\@evenfoot\@empty
@@ -10618,7 +11230,7 @@
 \makeoddhead{headings}{\slshape\rightmark}{}{\thepage}
 \makepsmarks{headings}{%
   \def\chaptermark##1{%
-    \markboth{\MakeUppercase{%
+    \markboth{\MakeTextUppercase{%
       \ifnum\c@secnumdepth > \m@ne
         \if@mainmatter
           \@chapapp\ \thechapter. \ %
@@ -10626,74 +11238,96 @@
       \fi
       ##1}}{}}%
   \def\sectionmark##1{%
-    \markright{\MakeUppercase{%
+    \markright{\MakeTextUppercase{%
       \ifnum\c@secnumdepth > \z@
         \thesection. \ %
       \fi
       ##1}}}
-  \def\tocmark{\markboth{\MakeUppercase{\contentsname}}{}}
-  \def\lofmark{\markboth{\MakeUppercase{\listfigurename}}{}}
-  \def\lotmark{\markboth{\MakeUppercase{\listtablename}}{}}
-  \def\bibmark{\markboth{\MakeUppercase{\bibname}}{}}
-  \def\indexmark{\markboth{\MakeUppercase{\indexname}}{}}
-  \def\glossarymark{\markboth{\MakeUppercase{\glossaryname}}{}}}
+  \def\tocmark{\markboth{\MakeTextUppercase{\contentsname}}{}}
+  \def\lofmark{\markboth{\MakeTextUppercase{\listfigurename}}{}}
+  \def\lotmark{\markboth{\MakeTextUppercase{\listtablename}}{}}
+  \def\bibmark{\markboth{\MakeTextUppercase{\bibname}}{}}
+  \def\indexmark{\markboth{\MakeTextUppercase{\indexname}}{}}
+  \def\glossarymark{\markboth{\MakeTextUppercase{\glossaryname}}{}}}
 \end{lcode}
 As you can see, defining the marks for a pagestyle is not necessarily the
-simplest thing in the world. However, courtesy of Lars\index{Madsen, Lars} Madsen,
-help is at hand.
+simplest thing in the world. With the extra tools described above,
+this code can be reduced to
+\begin{lcode}
+\makepagestyle{headings}
+\makeevenhead{headings}{\thepage}{}{\slshape\leftmark}
+\makeoddhead{headings}{\slshape\rightmark}{}{\thepage}
+\makepsmarks{headings}{%
+  \createmark{chapter}{left}{shownumber}{\@chapapp\ }{. \ }
+  \createmark{section}{right}{shownumber}{}{. \ }
+  \createplainmark{toc}{both}{\contentsname}
+  \createplainmark{lof}{both}{\listfigurename}
+  \createplainmark{lot}{both}{\listtablename}
+  \createplainmark{bib}{both}{\bibname}
+  \createplainmark{index}{both}{\indexname}
+  \createplainmark{glossary}{both}{\glossaryname}
+}
+\end{lcode}
+
 
-\begin{syntax}
-\cmd{\createplainmark}\marg{type}\marg{marks}\marg{text} \\
-\cmd{\memUChead}\marg{text} \\
-\cmd{\uppercaseheads} \cmd{\nouppercaseheads} \\
-\cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix} \\
-\end{syntax}
-\glossary(createplainmark)%
-  {\cs{createplainmark}\marg{type}\marg{marks}\marg{text}}%
-  {Defines the \cs{typemark} macro using \meta{text} as the mark, where
-  \meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}.}
-\glossary(createmark)%
-  {\cs{createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}}%
-  {Defines the \cs{secmark} macro where \meta{show} (\texttt{shownumber} 
-   or \texttt{nonumber}) controls whether the division number will be
-   displayed within \cs{mainmatter}, \meta{marks} is \texttt{left}, 
-   \texttt{both} or \texttt{right}, and \meta{prefix} and \meta{postfix}
-   are affixed before and after the \meta{sec} (division) number.}
-\glossary(memUChead)%
-  {\cs{memUChead}\marg{text}}%
-  {May uppercase \meta{text}, depending on \cs{uppercaseheads} and
-  \cs{nouppercaseheads}.}
-\glossary(uppercaseheads)%
-  {\cs{uppercaseheads}}%
-  {Defines \cs{memUChead} as equivalent to \cs{MakeUppercase}.}
-\glossary(nouppercaseheads)%
-  {\cs{nouppercaseheads}}%
-  {Defines \cs{memUChead} as \cs{relax} (i.e., do nothing).}
 
 
-The macro \cmd{\createplainmark} defines the \verb?\<type>mark?, where 
-\meta{type} is an unnumbered division-like head, such as \texttt{toc},
-\texttt{lof}, \texttt{index}, using \meta{text} as the mark value, and 
-\meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}. For example:
-\begin{lcode}
-\createplainmark{toc}{left}{\contentsname}
-\createplainmark{lot}{right}{\listtablename}
-\createplainmark{bib}{both}{\bibname}
-\end{lcode}
-is equivalent to
-\begin{lcode}
-\def\tocmark{\markboth{\memUChead{\contentsname}}{}}
-\def\lotmark{\markright{\memUChead{\listtablename}}}
-\def\lofmark{\markboth{\memUChead{\bibname}}{\memUChead{\bibname}}}
-\end{lcode}
 
-    Following the declaration \cmd{\uppercaseheads} the \cmd{\memUChead} 
-command is equivalent to \cmd{\MakeUppercase} but after the 
-\cmd{\nouppercaseheads} it is equivalent to \cmd{\relax} (which does nothing).
-The \cmd{\createplainmark} macro wraps \cmd{\memUChead} around the \meta{text}
-argument within the generated \cs{mark(both/right)} macro. By using the
-\cs{(no)uppercaseheads} declarations you can control the uppercasing, or
-otherwise, of the mark texts. The default is \cmd{\uppercaseheads}.
+% However, courtesy of Lars\index{Madsen, Lars} Madsen,
+% help is at hand.
+
+% \begin{syntax}
+% \cmd{\createplainmark}\marg{type}\marg{marks}\marg{text} \\
+% \cmd{\memUChead}\marg{text} \\
+% \cmd{\uppercaseheads} \cmd{\nouppercaseheads} \\
+% \cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix} \\
+% \end{syntax}
+% \glossary(createplainmark)%
+%   {\cs{createplainmark}\marg{type}\marg{marks}\marg{text}}%
+%   {Defines the \cs{typemark} macro using \meta{text} as the mark, where
+%   \meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}.}
+% \glossary(createmark)%
+%   {\cs{createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}}%
+%   {Defines the \cs{secmark} macro where \meta{show} (\texttt{shownumber} 
+%    or \texttt{nonumber}) controls whether the division number will be
+%    displayed within \cs{mainmatter}, \meta{marks} is \texttt{left}, 
+%    \texttt{both} or \texttt{right}, and \meta{prefix} and \meta{postfix}
+%    are affixed before and after the \meta{sec} (division) number.}
+% \glossary(memUChead)%
+%   {\cs{memUChead}\marg{text}}%
+%   {May uppercase \meta{text}, depending on \cs{uppercaseheads} and
+%   \cs{nouppercaseheads}.}
+% \glossary(uppercaseheads)%
+%   {\cs{uppercaseheads}}%
+%   {Defines \cs{memUChead} as equivalent to \cs{MakeTextUppercase}.}
+% \glossary(nouppercaseheads)%
+%   {\cs{nouppercaseheads}}%
+%   {Defines \cs{memUChead} as \cs{relax} (i.e., do nothing).}
+
+
+% The macro \cmd{\createplainmark} defines the \verb?\<type>mark?, where 
+% \meta{type} is an unnumbered division-like head, such as \texttt{toc},
+% \texttt{lof}, \texttt{index}, using \meta{text} as the mark value, and 
+% \meta{marks} is \texttt{left}, \texttt{both} or \texttt{right}. For example:
+% \begin{lcode}
+% \createplainmark{toc}{left}{\contentsname}
+% \createplainmark{lot}{right}{\listtablename}
+% \createplainmark{bib}{both}{\bibname}
+% \end{lcode}
+% is equivalent to
+% \begin{lcode}
+% \def\tocmark{\markboth{\memUChead{\contentsname}}{}}
+% \def\lotmark{\markright{\memUChead{\listtablename}}}
+% \def\lofmark{\markboth{\memUChead{\bibname}}{\memUChead{\bibname}}}
+% \end{lcode}
+
+%     Following the declaration \cmd{\uppercaseheads} the \cmd{\memUChead} 
+% command is equivalent to \cmd{\MakeTextUppercase} but after the 
+% \cmd{\nouppercaseheads} it is equivalent to \cmd{\relax} (which does nothing).
+% The \cmd{\createplainmark} macro wraps \cmd{\memUChead} around the \meta{text}
+% argument within the generated \cs{mark(both/right)} macro. By using the
+% \cs{(no)uppercaseheads} declarations you can control the uppercasing, or
+% otherwise, of the mark texts. The default is \cmd{\uppercaseheads}.
 
 \LMnote{2010/02/08}{added the following paragraph}
 Note that if you want to use a predefined page style, but would like
@@ -10705,59 +11339,49 @@
 \end{lcode}
 
 
-    The macro \cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}
-defines the \verb?\<sec>mark? macro where \meta{sec} is a sectional division
-such as \texttt{part}, \texttt{chapter}, \texttt{section}, etc., 
-and \meta{show} (\texttt{shownumber} 
-or \texttt{nonumber}) controls whether the division number will be
-displayed within \cs{mainmatter}. The \meta{marks} argument is \texttt{left}, 
-\texttt{both} or \texttt{right}, and \meta{prefix} and \meta{postfix}
-are affixed before and after the division number. For example:
-\begin{lcode}
-\createmark{section}{left}{nonumber}{}{}
-\createmark{section}{both}{nonumber}{}{}
-\createmark{section}{right}{nonumber}{}{}
-\end{lcode}
-is equivalent to, respectively
-\begin{lcode}
-\def\sectionmark#1{\markboth{#1}{}}
-\def\sectionmark#1{\markboth{#1}{#1}}
-\def\sectionmark#1{\markight{#1}}
-\end{lcode}
+%     The macro \cmd{\createmark}\marg{sec}\marg{marks}\marg{show}\marg{prefix}\marg{postfix}
+% defines the \verb?\<sec>mark? macro where \meta{sec} is a sectional division
+% such as \texttt{part}, \texttt{chapter}, \texttt{section}, etc., 
+% and \meta{show} (\texttt{shownumber}, \texttt{nonumber} or
+% \texttt{notitle} (implies \texttt{shownumber})) controls whether the division number will be
+% displayed within \cs{mainmatter}. The \meta{marks} argument is \texttt{left}, 
+% \texttt{both} or \texttt{right}, and \meta{prefix} and \meta{postfix}
+% are affixed before and after the division number. For example:
+% \begin{lcode}
+% \createmark{section}{left}{nonumber}{}{}
+% \createmark{section}{both}{nonumber}{}{}
+% \createmark{section}{right}{nonumber}{}{}
+% \end{lcode}
+% is equivalent to, respectively
+% \begin{lcode}
+% \def\sectionmark#1{\markboth{#1}{}}
+% \def\sectionmark#1{\markboth{#1}{#1}}
+% \def\sectionmark#1{\markight{#1}}
+% \end{lcode}
 
-The difference between \cmd{\createmark} and \cmd{\createplainmark} is
-that the former create a macro that takes an argument, whereas
-\cmd{\createplainmark} does not.
+% The difference between \cmd{\createmark} and \cmd{\createplainmark} is
+% that the former create a macro that takes an argument, whereas
+% \cmd{\createplainmark} does not.
 
 
-    Using these macros \Mname's current definition of 
-\verb?\makepsmarks{headings}? is much simpler (it also leads to a 
-slightly different result as the \texttt{toc} etc., marks set both
-the \cmd{\leftmark} and \cmd{\rightmark} instead of just the 
-\cmd{\leftmark}):
-\begin{lcode}
-\makepsmarks{headings}{%
-  \createmark{chapter}{left}{shownumber}{\@chapapp\ }{. \ }
-  \createmark{section}{right}{shownumber}{}{. \ }
-  \createplainmark{toc}{both}{\contentsname}
-  \createplainmark{lof}{both}{\listfigurename}
-  \createplainmark{lot}{both}{\listtablename}
-  \createplainmark{bib}{both}{\bibname}
-  \createplainmark{index}{both}{\indexname}
-  \createplainmark{glossary}{both}{\glossaryname}}
-\end{lcode}
+%     Using these macros \Mname's current definition of 
+% \verb?\makepsmarks{headings}? is much simpler (it also leads to a 
+% slightly different result as the \texttt{toc} etc., marks set both
+% the \cmd{\leftmark} and \cmd{\rightmark} instead of just the 
+% \cmd{\leftmark}):
+% \begin{lcode}
+% \makepsmarks{headings}{%
+%   \createmark{chapter}{left}{shownumber}{\@chapapp\ }{. \ }
+%   \createmark{section}{right}{shownumber}{}{. \ }
+%   \createplainmark{toc}{both}{\contentsname}
+%   \createplainmark{lof}{both}{\listfigurename}
+%   \createplainmark{lot}{both}{\listtablename}
+%   \createplainmark{bib}{both}{\bibname}
+%   \createplainmark{index}{both}{\indexname}
+%   \createplainmark{glossary}{both}{\glossaryname}}
+% \end{lcode}
 
 
-\LMnote{2010/02/08}{fixed typo}
-When \Mname{} runs the marks part of page style, it does not zero out
-old marks, i.e.\ if an old \cmd{\sectionmark} exist, it still exist
-even if we do not change it.  This is both a good and a bad thing. To help
-users redefine these marks to doing nothing we provide
-\begin{syntax}
-\cmd{\clearplainmark}\marg{type}\\
-\cmd{\clearmark}\marg{type}\\  
-\end{syntax}
-The used types are the same as for \cmd{\createplainmark} and \cmd{\createmark}.
 
 
 
@@ -10878,17 +11502,18 @@
 typeset with \pstyle{companion} pagestyle headers\index{header}. This pagestyle
 is part of the class.
 
-\begin{syntax}
-\cmd{\addtopsmarks}\marg{pagestyle}\marg{prepend}\marg{append} \\
-\end{syntax}
-\glossary(addtopsmarks)%
-  {\cs{addtopsmarks}\marg{pagestyle}\marg{prepend}\marg{append}}%
-  {Inserts \meta{prepend} and \meta{append} before and after the current
-   definition of \cs{makepsmarks} for \meta{pagestyle}.}
-\cmd{\addtopsmarks}\marg{pagestyle}\marg{prepend}\marg{append} is the last
-of this group of helper macros. It inserts \meta{prepend} and \meta{append} 
-before and after the current definition of \cs{makepsmarks} 
-for \meta{pagestyle}. For instance, if you wanted \cs{subsection} titles to appear
+% \begin{syntax}
+% \cmd{\addtopsmarks}\marg{pagestyle}\marg{prepend}\marg{append} \\
+% \end{syntax}
+% \glossary(addtopsmarks)%
+%   {\cs{addtopsmarks}\marg{pagestyle}\marg{prepend}\marg{append}}%
+%   {Inserts \meta{prepend} and \meta{append} before and after the current
+%    definition of \cs{makepsmarks} for \meta{pagestyle}.}
+% \cmd{\addtopsmarks}\marg{pagestyle}\marg{prepend}\marg{append} is the last
+% of this group of helper macros. It inserts \meta{prepend} and \meta{append} 
+% before and after the current definition of \cs{makepsmarks} 
+% for \meta{pagestyle}.
+For instance, if you wanted \cs{subsection} titles to appear
 in the page headers of the \pstyle{companion} pagestyle then this would be a way
 of doing it:
 \begin{lcode}
@@ -10959,8 +11584,9 @@
     As index\index{index} entries are usually very short, the 
 Index\index{index} is set in two columns\index{column!double}. 
 Unfortunately \ltx's marking mechanism can be very
-fragile on twocolumn\index{column!double} pages, but the standard 
-\Lpack{fixltx2e} package corrects this.
+fragile on twocolumn\index{column!double} pages.\footnote{This was
+  fixed in the \LaTeX{} kernel, but including the functionality from
+  the \Lpack{fixltx2e} package.}
 
     The index\index{index} itself is called by\index{indexing}
 \begin{lcode}
@@ -11262,9 +11888,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2015-07-20 13:55:32 +0200 (Mon, 20 Jul 2015) $}
-{$LastChangedRevision: 542 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2018-03-09 13:41:30 +0100 (Fri, 09 Mar 2018) $}
+{$LastChangedRevision: 587 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
@@ -12215,8 +12841,9 @@
 
 
 \LMnote{2013/05/16}{Added hint about enumitem}
-\begin{hint}
-  \theclass\ does not provide high level interfaces to configure the
+\LMnote{2018/03/09}{Changed hint to be a recommended section}
+\begin{recommended}
+    \theclass\ does not provide high level interfaces to configure the
   appearance. We provide some simple tools to adjust vertical spacing,
   see below.
 
@@ -12232,14 +12859,27 @@
   \end{lcode}
   syntax will work out of the box.
 
-  One difference though: In \theclass\ \verb?\ref{item:tst}? will give you
+  One key difference: In \theclass\ \verb?\ref{item:tst}? will give you
   `i', whereas, if \Lpack{enumitem} is loaded the full formatting is
   returned from the cross reference, i.e., `i)'. This is fully
   configurable in \Lpack{enumitem}.
-\end{hint}
-
-
 
+  Note that, \cmd{\tightlists}, \cmd{\defaultlists}, \cmd{\firmlists},
+  \cmd{\firmlists*} presented below, are not supported by
+  \Lpack{enumitem}, it provides a highlevel key based interface
+  instead.
+
+  Another feature from \Lpack{enumitem} that I (LM) uses a lot is to
+  combine the \cmd{\setlist} with \cmd{\AtBeginEnvironment} from the
+  \Lpack{etoolbox} package to specifically adjust enumerate used
+  inside certain theorem constructions. That wway we can control the
+  apparence of the lists from the preamble and does not need to use
+  say
+  \begin{lcode}
+    \begin{enumerate}[(a)]
+  \end{lcode}
+  every single time.
+\end{recommended}
 
 
 \index{list!tight|(} %|
@@ -12501,9 +13141,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2015-07-20 13:55:32 +0200 (Mon, 20 Jul 2015) $}
-{$LastChangedRevision: 542 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2018-09-14 11:13:10 +0200 (Fri, 14 Sep 2018) $}
+{$LastChangedRevision: 620 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%
 %%\chapterstyle{section}
@@ -13398,7 +14038,7 @@
 and \texttt{PAGE} 
  is the page number. In the numbered entry the pseudo-code
 \begin{lcode}
-{\cftKpresnum SNUM\cftaftersnum\hfil}
+{\cftKpresnum SNUM\cftKaftersnum\hfil}
 \end{lcode}
  is typeset within a box of width \lnc{\cftKnumwidth}, see the
  \cs{...numberlinebox} macros later on.
@@ -14277,6 +14917,31 @@
 a paragraph to itself). By uncommenting or commenting the noted lines 
 in the code you can change the layout a little. 
 
+
+\begin{caveat}
+  We have an interesting caveat regarding \cmd{\setupparasubsecs} if
+  you are using \Lpack{hyperref} \emph{and} you have subsubsections,
+  that are not shown in the ToC. You may see some inline subsection
+  entries showing up as `\dots\ text~15 ,\dots', that is a strange
+  space appears before the comma.
+
+  This is an artifact  due to the way \Lpack{hyperref} wraps itself
+  around the ToC entries, even the ones that are not typeset, and thus
+  an end of line space survives. We fix it using \cmd{\endlinechar}:
+  \begin{lcode}
+    \begingroup
+    \endlinechar=-1
+    \tableofcontents
+    \endgroup
+  \end{lcode}
+  Note again that it only happen if you have subsubsections with an
+  inline subsection entry list, \emph{and} you are using
+  \Lpack{hyperref}.
+\end{caveat}
+
+
+
+
     Normally, section titles (and below) are set as individual 
 paragraphs. Effectively the first thing that is done is to end any 
 previous paragraph, and also the last thing is to end the current 
@@ -14789,9 +15454,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2015-02-23 16:56:35 +0100 (Mon, 23 Feb 2015) $}
-{$LastChangedRevision: 507 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2020-03-15 19:48:39 +0100 (Sun, 15 Mar 2020) $}
+{$LastChangedRevision: 682 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -15462,9 +16127,8 @@
 definition order, except that a double column\index{float!double column} float 
 may be output before
 a later single column\index{float!single column} float of the same kind, or 
-\textit{vice-versa}\footnote{This little quirk
-is fixed by the \Lpack{fixltx2e} package, at least for tables and figures.
-The package is part of a normal \ltx\ distribution.}. 
+\textit{vice-versa}\footnote{As of 2015 this has been fixed in the
+  \LaTeX{} kernel.}. 
 A float is never put on an earlier page than its definition but may be 
 put on the same or later page of its definition. If a float cannot be 
 placed, all suceeding floats will be held up, and \ltx\ can store no 
@@ -15552,7 +16216,7 @@
 \glossary(setFloatBlockFor)%
 {\cs{setFloatBLockFor}\marg{sectional name}}%
 {Adds \cs{FloatBlock} within the \cs{\meta{section name}} macro.}
-where \meta{sectional name} is \emph{withput} the \cs{}, i.e.\
+where \meta{sectional name} is \emph{without} the \cs{}, i.e.\
 \begin{lcode}
   \setFloatBlockFor{section}
 \end{lcode}
@@ -15792,6 +16456,17 @@
     The commands described below are very similar to
 those supplied by the \Lpack{ccaption} package~\cite{CCAPTION}.
 
+As an alternative (it has more features that what the class offers) we
+recommend the \Lpack{caption} package by Axel Sommerfeldt. In fact if
+the \Lpack{caption} package is loaded, the class will detect it and
+reset it self such that \Lpack{caption} can take over. This also means
+that all the macros described in the next section will have no effect
+if \Lpack{caption} is loaded (either intentionally or
+unintentionally).
+
+
+
+
 \section{Caption styling} 
 
 \index{caption!style|(} %)|
@@ -16882,9 +17557,9 @@
 namely \ref{sf:1} and \subcaptionref{sf:2}.
 \begin{shadefigure}
 %\centering
-\subbottom[Subfigure 1]{\fbox{SUBFIGURE ONE}\label{sf:1}}
+\subbottom[Subfigure 1\label{sf:1}]{\fbox{SUBFIGURE ONE}}
 \hfill
-\subbottom[Subfigure 2]{\fbox{SUBFIGURE TWO}\label{sf:2}}
+\subbottom[Subfigure 2\label{sf:2}]{\fbox{SUBFIGURE TWO}}
 \caption{Figure with two subfigures} \label{fig:twosubfig}
 \end{shadefigure}
 \begin{lcode}
@@ -16892,9 +17567,9 @@
 namely \ref{sf:1} and \subcaptionref{sf:2}.
 \begin{figure}
 \centering
-\subbottom[Subfigure 1]{\fbox{SUBFIGURE ONE}\label{sf:1}}
+\subbottom[Subfigure 1\label{sf:1}]{\fbox{SUBFIGURE ONE}}
 \hfill
-\subbottom[Subfigure 2]{\fbox{SUBFIGURE TWO}\label{sf:2}}
+\subbottom[Subfigure 2\label{sf:2}]{\fbox{SUBFIGURE TWO}}
 \caption{Figure with two subfigures} \label{fig:twosubfig}
 \end{figure}
 \end{lcode}
@@ -17642,9 +18317,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2013-04-24 17:14:15 +0200 (Wed, 24 Apr 2013) $}
-{$LastChangedRevision: 442 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2018-09-06 15:05:23 +0200 (Thu, 06 Sep 2018) $}
+{$LastChangedRevision: 612 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -17672,6 +18347,27 @@
     Much of the material in this chapter strongly reflects the
 documentation of these packages.
 
+\begin{note}
+  As of September 2018: The \Lpack{array}, \Lpack{delarray},
+  \Lpack{tabularx} and \Lpack{dcolumn} packages are no longer embedded
+  into the class, but rather being autoloaded from the \LaTeX\
+  installation.\footnote{As the embedded versions were more or less
+    carbon copies, it makes much more sense to let the \LaTeX-team
+    maintain them, than us having to replace the embedded copy each
+    time they are updated or bug fixed.} As the embededed versions
+  were just carbon copies,\footnote{With edited error messages.} we
+  get the same result but just loading the packages, with less
+  maintenance. Plus these packages are part of the \LaTeX{} core
+  packages and thus is available in all \LaTeX{} installations.
+
+  We have kept the documentation we had written for the manual (and
+  updated it slightly), but refer to \cite{ARRAY}, \cite{DELARRAY}, \cite{TABULARX} and
+  \cite{DCOLUMN} for the 100\% up to date documentation.
+\end{note}
+
+\fancybreak{}
+
+
  Additionally, new kinds of tabular environments are also provided.
 
 
@@ -17727,42 +18423,64 @@
 \centering
  \caption{The array and tabular preamble options.} \label{tab:tabpream}
     \setlength{\extrarowheight}{1pt}
-    \begin{tabular}{cp{9cm}} \toprule
- \texttt{l}             &  Left adjusted column. \\
- \texttt{c}             &  Centered adjusted column. \\
- \texttt{r}             &  Right adjusted column. \\
- \texttt{p}\marg{width} &  Equivalent to \verb?\parbox[t]?\marg{width}. \\
- \texttt{m}\marg{width} &  Defines a column of width \meta{width}.
-                           Every entry will be centered in proportion to
-                           the rest of the line. It is somewhat like
-                           \cmd{\parbox}\marg{width}. \\
- \texttt{b}\marg{width} &  Coincides with \verb?\parbox[b]?\marg{width}. \\
- \texttt{>}\marg{decl}  &  Can be used before an \texttt{l}, \texttt{r},
-                           \texttt{c}, \texttt{p}, \texttt{m} or a
-                           \texttt{b} option. It inserts \meta{decl}
-                           directly in front of the entry of the column.
-                           \\
- \texttt{<}\marg{decl}  &  Can be used after an \texttt{l}, \texttt{r},
-                           \texttt{c}, \verb?p{..}?, \verb?m{..}? or a 
-                           \verb?b{..}?
-                           option.  It inserts \meta{decl} right
-                           after the entry of the column.  \\
- \texttt{|}             &  Inserts a vertical line. The distance between
-                           two columns will be enlarged by the width of
-                           the line. \\
- \texttt{@}\marg{decl}  &  Suppresses inter-column space and inserts
-                           \meta{decl} instead. \\
- \texttt{!}\marg{decl}  &  Can be used anywhere and corresponds with the
-                           \texttt{|} option. The difference is that
-                           \meta{decl} is inserted instead of a
-                           vertical line, so this option doesn't
-                           suppress the normally inserted space between
-                           columns in contrast to \verb?@{...}?.\\
- \texttt{*}\marg{num}\marg{opts} & Equivalent to \meta{num} copies of
-                                   \meta{opts} \\
- \texttt{D}\marg{ssep}\marg{osep}\marg{places} & Column entries aligned
-                           on a `decimal point' \\
-       \bottomrule
+    \begin{tabular}{cp{9cm}} \toprule \texttt{l} & Left adjusted
+      column.
+      \\
+      \texttt{c} & Centered adjusted column.
+      \\
+      \texttt{r} & Right adjusted column.
+      \\
+      \texttt{p}\marg{width} & Equivalent to
+      \verb?\parbox[t]?\marg{width}.
+      \\
+      \texttt{m}\marg{width} & Defines a column of width \meta{width}.
+      Every entry will be centered in proportion to the rest of the
+      line. It is somewhat like \cmd{\parbox}\marg{width}.
+      \\
+      \texttt{b}\marg{width} & Coincides with
+      \verb?\parbox[b]?\marg{width}.
+      \\
+      \texttt{>}\marg{decl} & Can be used before an \texttt{l},
+      \texttt{r}, \texttt{c}, \texttt{p}, \texttt{m} or a \texttt{b}
+      option. It inserts \meta{decl} directly in front of the entry of
+      the column.
+      \\
+      \texttt{<}\marg{decl} & Can be used after an \texttt{l},
+      \texttt{r}, \texttt{c}, \verb?p{..}?, \verb?m{..}? or a
+      \verb?b{..}?  option.  It inserts \meta{decl} right after the
+      entry of the column.
+      \\
+      \texttt{|} & Inserts a vertical line. The distance between two
+      columns will be enlarged by the width of the line.
+      \\
+      \texttt{@}\marg{decl} & Suppresses inter-column space and
+      inserts \meta{decl} instead.
+      \\
+      \texttt{!}\marg{decl} & Can be used anywhere and corresponds
+      with the \texttt{|} option. The difference is that \meta{decl}
+      is inserted instead of a vertical line, so this option doesn't
+      suppress the normally inserted space between columns in contrast
+      to \verb?@{...}?.
+      \\
+      \texttt{*}\marg{num}\marg{opts} & Equivalent to \meta{num}
+      copies of \meta{opts}
+      \\
+      \texttt{w}\marg{align}\marg{width} & \raggedright\arraybackslash
+      \emph{New in \Lpack{array} v2.4h, 2018.} Here \meta{align} is
+      one of \texttt{l}, \texttt{c} or \texttt{r}. The construction
+      corresponds to every cell in the column being formated as
+      \verb|\makebox|\oarg{width}\oarg{align}\marg{cell}. It will
+      silently overprint if the contents are wider than \meta{width}.
+      \\
+
+      \texttt{W}\marg{align}\marg{width} & \emph{New in in \Lpack{array}
+        v2.4h, 2018.} Similar to \texttt{w}, but issues an overfull warning if
+      the contents is too wide.
+      \\
+      \texttt{D}\marg{ssep}\marg{osep}\marg{places} & Column entries aligned
+      on a `decimal point' 
+      \\
+      \bottomrule
     \end{tabular}
 % \end{center}
 \end{adjustwidth}
@@ -17861,8 +18579,19 @@
       to show different spacing effects.
  \end{itemize}
 
+\goodbreak
+ 
  \subsection{D column specifiers} \label{sec:dcolumns}
 
+ \begin{recommended}
+   As an alternative to the \texttt{D} column (through using the
+   \Lpack{dcolumn} package), you can use the \Lpack{siunitx} package
+   which have the added bonus of many more configuration and
+   formatting features. See \cite{SIUNITX} for details.
+ \end{recommended}
+
+
+ 
     In financial tables dealing with pounds
 and pence or dollars and cents, column entries
 should be aligned on the separator between the numbers. The \texttt{D}
@@ -19613,9 +20342,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2015-05-11 16:20:03 +0200 (Mon, 11 May 2015) $}
-{$LastChangedRevision: 532 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2020-03-25 19:00:55 +0100 (Wed, 25 Mar 2020) $}
+{$LastChangedRevision: 686 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 \chapter{Page notes} \label{chap:mnotes}
 
@@ -19629,6 +20358,8 @@
 
 
 \section{Footnotes}
+\index{footnote|(}
+
 
     A footnote can be considered to be a special kind of float\index{float} 
 that is put at the bottom of a page.
@@ -19649,6 +20380,8 @@
 at the end of the \Ie{minipage}. Results are likely to be peculiar if
 it is used anywhere else (like in a \Ie{tabular}).
 
+
+
 \begin{syntax}
 \cmd{\footnotemark}\oarg{num} \\
 \cmd{\footnotetext}\oarg{num}\marg{text} \\
@@ -19673,6 +20406,8 @@
 In any event, you can use a combination of \cmd{\footnotemark} and 
 \cmd{\footnotetext} to do footnoting where \ltx\ would normally get upset.
 
+
+
 \begin{syntax}
 \cmd{\footref}\marg{label} \\
 \end{syntax}
@@ -19683,18 +20418,18 @@
 to the text of a footnote\index{footnote!reference}. This can be done by 
 putting a \cmd{\label} in the footnote and then using \cmd{\footref} to refer 
 to the label; this prints the footnote mark. For example:
-\begin{comment}
-%%% in memdesign, not memman
-\begin{lcode}
-...\footnote{... adults or babies.\label{fn:rabbits}}
-...
-... The footnote\footref{fn:rabbits} on \pref{fn:rabbits} ...
-\end{lcode}
-In this manual, the last line above prints:
-\begin{syntax}
-... The footnote\footref{fn:rabbits} on \pref{fn:rabbits} ... \\
-\end{syntax}
-\end{comment}
+% \begin{comment}
+% %%% in memdesign, not memman
+% \begin{lcode}
+% ...\footnote{... adults or babies.\label{fn:rabbits}}
+% ...
+% ... The footnote\footref{fn:rabbits} on \pref{fn:rabbits} ...
+% \end{lcode}
+% In this manual, the last line above prints:
+% \begin{syntax}
+% ... The footnote\footref{fn:rabbits} on \pref{fn:rabbits} ... \\
+% \end{syntax}
+% \end{comment}
 \begin{lcode}
 ...\footnote{...values for the kerning.\label{fn:kerning}} ...
 ...
@@ -19702,10 +20437,14 @@
 \end{lcode}
 In this manual, the last line above prints:
 \begin{syntax}
-... The footnote\footref{fn:kerning} on \pref{fn:kerning} ... \\
+  ...
+  The footnote\footref{fn:kerning}
+%  on \pref{fn:kerning} ...
 \end{syntax}
 
 
+
+
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%% from membook
 
@@ -19747,19 +20486,23 @@
 put just after the bottom line of text. The standard positioning is
 used following the \cmd{\feetabovefloat} declaration, which is the default.
 
-\begin{syntax}
-\cmd{\feetatbottom} \\
-\end{syntax}
-\glossary(feetatbottom)%
-  {\cs{feetatbottom}}%
-  {Place footnotes at the very bottom of the text block whenever we
-    are in a non \cs{flushbottom} context.}
-Then\Added{2015/04/22} we use \cs{raggedbottom} or similar, \LaTeX{}
-will by default attach the footnotes just below the text. In many
-cases it may look better if the footnotes are being build from the
-bottom of the texst block up. Issuing \cs{feetatbottom} does
-this. Please note that \cs{feetatbottom} has no effect whenever
-\cs{flushbottom} is active.
+
+
+\LMnote{2018/09/19}{Removed \cs{feetatbottom} from the manual. It does not
+  actually do anything. The footnotes are always at the bottom}
+% \begin{syntax}
+% \cmd{\feetatbottom} \\
+% \end{syntax}
+% \glossary(feetatbottom)%
+%   {\cs{feetatbottom}}%
+%   {Place footnotes at the very bottom of the text block whenever we
+%     are in a non \cs{flushbottom} context.}
+% Then\Added{2015/04/22} we use \cs{raggedbottom} or similar, \LaTeX{}
+% will by default attach the footnotes just below the text. In many
+% cases it may look better if the footnotes are being build from the
+% bottom of the texst block up. Issuing \cs{feetatbottom} does
+% this. Please note that \cs{feetatbottom} has no effect whenever
+% \cs{flushbottom} is active.
 
 
 
@@ -20338,8 +21081,10 @@
 
 \index{footnote|)}
 
- \section{Marginal notes}
+\section{Marginal notes}
+
 
+ 
 \LMnote{2010/01/**}{added a reference back to \cs{setmarginnotes}}
      Some marginalia can also be considered to be kinds of floats. 
 The class provides the standard margin notes\index{margin note} 
@@ -21278,7 +22023,8 @@
 \begin{syntax}
 \cmd{\pageinnotes}\marg{auto generated note label key}\\
 \cmd{\printpageinnotes}\marg{auto generated note label key}\\  
-\cmd{\printpageinnoteshyperref}\marg{auto generated note label key}
+\cmd{\printpageinnoteshyperref}\marg{auto generated note label key}\\
+\cmd{\pagerefname}
 \end{syntax}
 \glossary(pageinnotes)%
 {\cs{pageinnotes}\marg{pagenum}}%
@@ -21291,6 +22037,9 @@
 {Prints an endnote's page reference number whenever the
   \protect\Lpack{hyperref} package is used, it will include a
   hyperlink back to the page in question.}%
+\glossary(pagerefname)%
+{\cs{pagerename}}%
+{Holds the name prefix when referring to a page number, defaults to \texttt{page}.}%
 Default definitions
 \begin{lcode}
 \newcommand*{\printpageinnotes}[1]{%
@@ -23181,9 +23930,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2013-04-24 17:14:15 +0200 (Wed, 24 Apr 2013) $}
-{$LastChangedRevision: 442 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2018-03-06 15:58:01 +0100 (Tue, 06 Mar 2018) $}
+{$LastChangedRevision: 584 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%%%%% membook
@@ -23317,16 +24066,28 @@
 In the \Ie{snugshaded} environment the box clings more closely to its
 contents than it does in the \Ie{shaded} environment.
 
+\begin{recommended}
+  Since the class was originally written, much have happened in the
+  gfx generating capabilities in LaTeX, especially the popularity of
+  TikZ has provided many more extensive box and graphics generating
+  packages.
+
+  As of 2018 one of the most impressive packages for all sorts of
+  boxes is the \Lpack{tcolorbox} package by Thomas~F.~Sturm.
+\end{recommended}
+
+
+
 %%    Following the declaration \cmd{\frameasnomaltrue}, which is the
 %default, normal paragraphing is used for the framed text. On the
 %%other hand, following the declaration \cmd{\frameasnormalfalse}
 %the paragraphing follows the \Ie{minipage} style layout (i.e.,
 %%no indentation of the first line).
 
-    Be aware that these boxes are somewhat delicate; they do not work
-in all circumstances. For example they will not work with the
-\Lpack{multicol} package~\cite{MULTICOL}, and any floats or footnotes
-in the boxes will disappear.
+Be aware that the boxes we present in this manual are somewhat
+delicate; they do not work in all circumstances. For example they will
+not work with the \Lpack{multicol} package~\cite{MULTICOL}, and any
+floats or footnotes in the boxes will disappear.
 
 \begin{syntax}
 \lnc{\FrameRule} \lnc{\FrameSep} \lnc{\FrameHeightAdjust} \\
@@ -24143,6 +24904,11 @@
     Verbatim tabbing, but not wrapping, applies to the \Ie{boxedverbatim}
 environment.
 
+\begin{recommended}
+  Again the \Lpack{tcolorbox} package offers boxes vs verbatim text.
+\end{recommended}
+
+
 \subsection{New verbatims}
 
 \index{verbatim!new|(}
@@ -25533,9 +26299,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2014-03-31 11:34:44 +0200 (Mon, 31 Mar 2014) $}
-{$LastChangedRevision: 480 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2020-03-25 19:00:55 +0100 (Wed, 25 Mar 2020) $}
+{$LastChangedRevision: 686 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 
 \LMnote{2010/06/09}{Several \cs{ixfile}'s changed to \cs{pixfile},
@@ -26356,6 +27122,8 @@
 \end{verse}}
 was mentioned on page 37.
 
+\index{index!preparation|)}
+
 
 \subsection{MakeIndex}
 
@@ -26612,7 +27380,7 @@
 of the \texttt{!}, \texttt{@}, \texttt{|} or \texttt{"} characters there
 is the difficulty of persuading \Lmakeindex\ to ignore the special
 meaning. This is solved by the \texttt{quote} specifier, which is
-normally the \texttt{"} character\index{\" (qs)?\texttt{"} (quote specifier)}. 
+normally the \texttt{"} character\index{\"" (qs)?\texttt{""} (quote specifier)}. 
 The character
 immediately after \texttt{"} is treated as non-special. For example,
 if you needed to index the \texttt{@} and \texttt{!} characters:
@@ -27376,9 +28144,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2014-03-31 11:34:44 +0200 (Mon, 31 Mar 2014) $}
-{$LastChangedRevision: 480 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2020-10-04 21:52:58 +0200 (Sun, 04 Oct 2020) $}
+{$LastChangedRevision: 696 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %\clearpage
@@ -27494,6 +28262,20 @@
 which is the default, switches on the trim marks. These declarations do
 nothing if the \Lopt{showtrims} option has not been used.
 
+
+\begin{Changed}
+  From the \LaTeX\ format dated 2020/10/01 we changed the way
+  trimmarks are added to the pages. It will now go through the
+  »\texttt{shipout/background}« hook instead of changing the
+  \cmd{\shipout} routine directly. This also have the advantage that
+  the hooks can be reordered if say you want something to be added to
+  \texttt{shipout/background} \emph{before} the trimmarks are added.
+  For more details about the hooks see \cite{LTHOOKS,LTSHIPOUT}.
+
+  The trimmarks will have the hook label »\texttt{memoir/trimmarks}«.
+\end{Changed}
+
+
 \LMnote{2013/05/01}{added caveat}
 \begin{caveat}
   Most modern \LaTeX\ editors make use of the \emph{synctex} features
@@ -27507,10 +28289,17 @@
   line one is referred back to may be off by tens of lines.
 
   Currently, there is no known workarounds for this deficiency.
+
+  NB: We have yet to see if the 2020/10/01 format update and change to
+  the trimmarks implementation will fix this issue.
+  
 \end{caveat}
 
 
 
+
+
+
     Trim marks can be placed at each corner of the (trimmed) page, and also
 at the middle of each side of the page.
 
@@ -27928,6 +28717,17 @@
 commands. If you want to change the value use \cmd{\setcounter}, and to change
 the typesetting style use \cmd{\renewcommand} on \cs{thectr}.
 
+
+\begin{caveat}
+  As of 2018 \cmd{\counterwithout} and \cmd{\counterwithin} will be
+  provided by the \LaTeX-kernel, thus we only provide it if it does
+  not already exist.
+\end{caveat}
+
+
+
+
+
 \LMnote{2010/01/30}{Added \cs{letcountercounter}}
 \begin{syntax}
   \cmd{\letcountercounter}\marg{counterA}\marg{counterB}\\
@@ -28787,8 +29587,9 @@
 \begin{syntax}
 \piif{ifpdf} ... \verb?\fi? \\
 \end{syntax}
-The class provides \piif{ifpdf} which is \ptrue\ when the document is
-being processed by \pixpdfltx\ and \pfalse\ otherwise. You can use it like this:
+The class provides \piif{ifpdf} (by autoloading the \Lpack{iftex}
+package) which is \ptrue\ when the document is being processed by
+\pixpdfltx\ and \pfalse\ otherwise. You can use it like this:
 \begin{lcode}
 \ifpdf
   code for pdfLaTeX only 
@@ -28802,17 +29603,19 @@
 
     Modern \ltx\ distributions use \pixetx, which is an extended version
 of \tx, as the underlying engine. \pixetx\ provides some more primitives
-than \tx, which may be useful, but not everybody has \pixetx\ available.
+than \tx, which may be useful, but not everybody has \pixetx\
+available (Though, as of 2018, this is \emph{very} rare).
 
 \begin{syntax}
 \piif{ifetex} \\
 \end{syntax}
 \glossary(ifetex)%
-  {\cs{ifetex}}%
-  {\ptrue\ if \etx\ is the underlying engine, otherwise \pfalse.}
-\piif{ifetex} can be used to determine if \pixetx\ is being used as the
-underlying engine; it is analagous to \piif{ifpdf} which tests for
-\pixpdfltx. For example:
+{\cs{ifetex}}%
+{\ptrue\ if \etx\ is the underlying engine, otherwise \pfalse.}
+\piif{ifetex} can be used to determine if \pixetx\ is being used as
+the underlying engine; it is analagous to \piif{ifpdf} which tests for
+\pixpdfltx\ (provided by autoloading the \Lpack{iftex} package). For
+example:
 \begin{lcode}
 \ifetex
   %%% code only processible by etex
@@ -28824,8 +29627,8 @@
 
 \subsection{Checking for XeTeX}
 
-    You have been able to use \cs{ifpdf} to check if \pixpdfltx\ is being used 
-to process the document.
+You have been able to use \cs{ifpdf} to check if PDF output is being
+used to process the document.
 
 \begin{syntax}
 \piif{ifxetex} \\
@@ -28834,17 +29637,33 @@
   {\cs{ifxetex}}%
   {\ptrue\ if \xetx\ is being used to process the document.}
 
-In a similar manner you can use \piif{ifxetex} to check if the document
-is being processed by \pixxetx.
+  In a similar manner you can use \piif{ifxetex} to check if the
+  document is being processed by \pixxetx\ (provided by autoloading
+  the \Lpack{iftex} package).
 
 \begin{syntax}
 \cmd{\RequireXeTeX} \\
 \end{syntax}
 \glossary(RequireXeTeX)%
-  {\cs{RequireXeTeX}}%
-  {Generates an error if the document is not being processed by \xetx.}
-The class also provides \cmd{\RequireXeTeX}, which generates an error if
-\pixxetx\ is not being used to process the document.
+{\cs{RequireXeTeX}}%
+{Generates an error if the document is not being processed by \xetx.}
+The \Lpack{iftex} package also provides \cmd{\RequireXeTeX}, which
+generates an error if \pixxetx\ is not being used to process the
+document. This can be useful if you make your own class building upon
+\Lclass{memoir}.
+
+\subsection{Checking for LuaTeX}
+\label{sec:checking-lualatex}
+
+Similarly you can use 
+\begin{syntax}
+\piif{ifluatex} \\
+\end{syntax}
+\glossary(ifluatex)%
+  {\cs{ifluatex}}%
+  {\ptrue\ if \luatx\ is being used to process the document.}
+to check if the doc is being process by  \luatx. Again provided by
+loading \Lpack{iftex}.
 
 
 \section{Leading}
@@ -29363,6 +30182,28 @@
 
 \subsection{Inserting code before and after a file, package or class}
 
+\begin{Changed}
+  As of \LaTeX\ format dated 2020/10/01 these \cs{At...} macros
+  described below will be implemented using kernel hooks as layed out
+  via \cite{LTFILEHOOK}. Which also means the order of the hooks can
+  actually be changed. See \cite{LTHOOKS} for general information
+  about the hooking feature.
+\end{Changed}
+
+\begin{caveat}
+  In the \marg{code} part of the hooks, any use of \# needs to be
+  doubled. Thus if you want to redefine the macro \cs{foo} which takes
+  an argument at the end of package \textsf{bar}, you need to use
+\begin{verbatim}
+\AtEndPackage{bar}{
+  \renewcommand\foo[1]{something something ##1}
+}
+\end{verbatim}
+In the format coming after 2020/10/01 we actually only needed a single
+\#, but then our code is not backwards compatible, so the \#\ is now
+forced even in the new emplementation.
+\end{caveat}
+
     The kernel provides two commands, \cmd{\AtBeginDocument}
 and \cmd{\AtEndDocument} which can only be used in the preamble, 
 for inserting code at the start and end
@@ -29378,31 +30219,57 @@
 insertions, which should be used before the relevant file is called for.
 
 \begin{syntax}
-\cmd{\AtBeginFile}\marg{file}\marg{code} \\
-\cmd{\AtEndFile}\marg{file}\marg{code} \\
+\cmd{\AtBeginFile}\marg{filename}\marg{code} \\
+\cmd{\AtEndFile}\marg{filename}\marg{code} \\
 \end{syntax}
 \glossary(AtBeginFile)%
-  {\cs{AtBeginFile}\marg{file}\marg{code}}%
-  {Inserts \meta{code} just before the \meta{file} is input 
+  {\cs{AtBeginFile}\marg{filename}\marg{code}}%
+  {Inserts \meta{code} just before the \meta{filename} is input 
    (or included, etc.).}%
 \glossary(AtEndFile)%
-  {\cs{AtEndFile}\marg{file}\marg{code}}%
-  {Inserts \meta{code} just after the \meta{file} is input 
-   (or included, etc.).}%
-The \cmd{\AtBeginFile} macro inserts \meta{code} just before the \meta{file}
-file is \cmd{\input} (or \cmd{\include}d, etc.). Similarly
-\cmd{\AtEndFile} inserts the \meta{code} immediately after the 
-\meta{file}. The \meta{file} argument must be the same as used in the
-corresponding \cmd{\input} command. If \meta{file} includes an 
-extension, for example \texttt{fred.def}, then that is taken as 
-the complete name, otherwise if there is no extension, 
-for instance \texttt{fred}, then the \texttt{.tex} extension is 
-automatically appended making the full name \texttt{fred.tex}.
+  {\cs{AtEndFile}\marg{filename}\marg{code}}%
+  {Inserts \meta{code} just after the \meta{filename} is input 
+    (or included, etc.).}%
+The \cmd{\AtBeginFile} macro inserts \meta{code} just before the
+\meta{filename} file is \cmd{\input} (or \cmd{\include}d,
+etc.). Similarly \cmd{\AtEndFile} inserts the \meta{code}
+immediately after the \meta{filename}. The \meta{filename} argument
+must be the same as used in the corresponding \cmd{\input}
+command. If \meta{filename} includes an extension, for example
+\texttt{fred.def}, then that is taken as the complete name,
+otherwise if there is no extension, for instance \texttt{fred}, then
+the \texttt{.tex} extension is automatically appended making the
+full name \texttt{fred.tex}.
 
     The \cs{At...File} commands 
-must be issued \emph{before} the corresponding \meta{file} is input 
+must be issued \emph{before} the corresponding \meta{filename} is input 
 otherwise nothing will happen.
 
+\begin{caveat}
+  As of \LaTeX\ format 2020/10/01 this is \textbf{no longer true!} You
+  will now have to provide the \texttt{.tex} extension if it is a
+  \texttt{.tex} file you want to hook into, as in:
+\begin{verbatim}
+\AtEndFile{test.tex}{\typeout{test.tex is done}}
+\end{verbatim}
+  Also note that the 2020/10/01 format will have some specific hooks
+  what apply to \cmd{\include}. The class does not provide an
+  interface for this and instead refers to \cite{LTFILEHOOK}.
+
+  Note that \cmd{\At...File} actually did not work correctly for
+  \cmd{\include} in the old implementation, it still needed the
+  extension! In this new implementation both \cmd{\input} and
+  \cmd{\include} trigger.
+\end{caveat}
+\begin{Changed}
+  By the 2020/10/01 format this is now implemented via the
+  \texttt{file/before/filename} and \texttt{file/after/filename}
+  hooks. We are not adding any hook label.
+\end{Changed}
+
+
+
+
 \begin{syntax}
 \cmd{\AtBeginPackage}\marg{pack}\marg{code} \\
 \cmd{\AtEndPackage}\marg{pack}\marg{code} \\
@@ -29433,6 +30300,14 @@
 If the package has already been used then the \meta{code} is 
 called immediately.
 
+\begin{Changed}
+  By the 2020/10/01 format this is now implemented via the
+  \texttt{package/before/pack} and \texttt{package/after/pack}
+  hooks. We are not adding any hook label.
+\end{Changed}
+
+
+
 
 \begin{syntax}
 \cmd{\AtBeginClass}\marg{class}\marg{code} \\
@@ -29464,61 +30339,75 @@
 If the class has already been used then the \meta{code} is 
 called immediately.
 
-    There is an unfortunate interaction between the kernel's 
-\cmd{\AtEndOfPackage} and the class's \cmd{\AtEndPackage}, and similarly
-for the \cmd{\AtEndOfClass} and \cmd{\AtEndClass}. I discovered this when
-I tried to automate using the \Lpack{memhfixc} package if \Lpack{hyperref}
-was being used by putting the following into the \Pclass{memoir} code
-\begin{lcode}
-\AtEndPackage{hyperref}{\usepackage{memhfixc}}
-\end{lcode}
-which caused all sorts of problems.
+\begin{Changed}
+  By the 2020/10/01 format this is now implemented via the
+  \texttt{class/before/pack} and \texttt{class/after/pack}
+  hooks. We are not adding any hook label.
+\end{Changed}
 
-    The kernel scheme looks like this:
-\begin{lcode}
-\newcommand{\usepackage}[1]{%
-  ...
-  \InputIfFileExists{#1}
-<AtEndOfPackage code>}
-\end{lcode}
 
-    The basic mechanism for implementing the class macros is by modifying
-the kernel's \cmd{\InputIfFileExists} macro, which internally uses a form of
-\cs{input} to read in the file, so that the inserted \meta{code} comes 
-immediately before and after the \cs{input}, somewhat like:
-\begin{lcode}
-\renewcommand{\InputIfFileExists}[1]{%
-  ...
-  <before code> \input{#1} <after code>}
-\end{lcode}
 
-    If \cmd{\AtEndPackage} is applied to a package that has an internal
-\cmd{\AtEndOfPackage} then the result can be sketched as:
-\begin{lcode}
-\newcommand{\usepackage}[1]{%
-  ...
-  <before code>
-  \input{#1}
-  <after code>
-  <AtEndOfPackage code>
-}
-\end{lcode}
-In other words the body of the package is read in, the \cmd{\AtEndPackage} code
-is called, and then \emph{after} that the \cmd{\AtEndOfPackage} code is called.
 
-    The \Lpack{hyperref} package internally uses \cmd{\AtEndOfPackage} to read
-some files and \Lpack{memhfixc} had to be input after these. A way to automate
-\Lpack{memhfixc} after \Lpack{hyperref} is:
-\begin{lcode}
-\AtEndPackage{hyperref}{%
-  \AtBeginDocument{\usepackage{memhfixc}}}
-\end{lcode}
-but this seems more trouble than it's worth especially since 
-Heiko\index{Oberdiek, Heiko} Oberdiek has kindly updated \Lpack{hyperref} 
-so that versions after 2006/11/15  will automatically load the 
-\Lpack{memhfixc} package.
+%     There is an unfortunate interaction between the kernel's 
+% \cmd{\AtEndOfPackage} and the class's \cmd{\AtEndPackage}, and similarly
+% for the \cmd{\AtEndOfClass} and \cmd{\AtEndClass}. I discovered this when
+% I tried to automate using the \Lpack{memhfixc} package if \Lpack{hyperref}
+% was being used by putting the following into the \Pclass{memoir} code
+% \begin{lcode}
+% \AtEndPackage{hyperref}{\usepackage{memhfixc}}
+% \end{lcode}
+% which caused all sorts of problems.
+
+%     The kernel scheme looks like this:
+% \begin{lcode}
+% \newcommand{\usepackage}[1]{%
+%   ...
+%   \InputIfFileExists{#1}
+% <AtEndOfPackage code>}
+% \end{lcode}
+
+%     The basic mechanism for implementing the class macros is by modifying
+% the kernel's \cmd{\InputIfFileExists} macro, which internally uses a form of
+% \cs{input} to read in the file, so that the inserted \meta{code} comes 
+% immediately before and after the \cs{input}, somewhat like:
+% \begin{lcode}
+% \renewcommand{\InputIfFileExists}[1]{%
+%   ...
+%   <before code> \input{#1} <after code>}
+% \end{lcode}
+
+%     If \cmd{\AtEndPackage} is applied to a package that has an internal
+% \cmd{\AtEndOfPackage} then the result can be sketched as:
+% \begin{lcode}
+% \newcommand{\usepackage}[1]{%
+%   ...
+%   <before code>
+%   \input{#1}
+%   <after code>
+%   <AtEndOfPackage code>
+% }
+% \end{lcode}
+% In other words the body of the package is read in, the \cmd{\AtEndPackage} code
+% is called, and then \emph{after} that the \cmd{\AtEndOfPackage} code is called.
+
+%     The \Lpack{hyperref} package internally uses \cmd{\AtEndOfPackage} to read
+% some files and \Lpack{memhfixc} had to be input after these. A way to automate
+% \Lpack{memhfixc} after \Lpack{hyperref} is:
+% \begin{lcode}
+% \AtEndPackage{hyperref}{%
+%   \AtBeginDocument{\usepackage{memhfixc}}}
+% \end{lcode}
+% but this seems more trouble than it's worth especially since 
+% Heiko\index{Oberdiek, Heiko} Oberdiek has kindly updated \Lpack{hyperref} 
+% so that versions after 2006/11/15  will automatically load the 
+% \Lpack{memhfixc} package.
 
 
+The 2020/10/01 format hooking features will solve a lot of issues we
+have had with file hooking, especially when things are delayed via
+\cmd{\AtBeginDocument} and you want to have your code to run after
+someone else's code. The hooking feature now offers users to add rules
+to reorder how the hooks are executed. See \cite{LTHOOKS} for details.
 
 \renewcommand{\memsecinfo}[5]{\edef\Margi{#1}\edef\Margii{#2}%
                               \edef\Margiii{#3}\edef\Margiv{#4}%
@@ -29936,9 +30825,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2013-04-24 17:14:15 +0200 (Wed, 24 Apr 2013) $}
-{$LastChangedRevision: 442 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2020-03-25 19:00:55 +0100 (Wed, 25 Mar 2020) $}
+{$LastChangedRevision: 686 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -30207,6 +31096,7 @@
 \drawmarginparstrue
 \drawparametersfalse
 \drawstock
+\vskip-2pt
 \legend{An illustration of Bringhurst's page layout style when printed
 on US letter paper stock. Also shown are the values used for the
 page layout parameters for this design.} \label{fig:bplayout}
@@ -31543,9 +32433,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2015-07-08 09:49:37 +0200 (Wed, 08 Jul 2015) $}
-{$LastChangedRevision: 536 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2018-09-06 15:05:23 +0200 (Thu, 06 Sep 2018) $}
+{$LastChangedRevision: 612 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 \chapter{Packages and macros}
 
@@ -31576,6 +32466,11 @@
       of floats\index{float} on a twocolumn\index{column!double} page 
       and ensures the correct marking
       on a twocolumn\index{column!double} page.
+
+      Note that as of 2015, the functionality of this package has been
+      merged into the \LaTeX{} kernel. Loading this package does nothing.
+
+      
 \item \Lpack{alltt}~\cite{ALLTT} is a basic package which provides a 
       verbatim-like environment but \verb?\?, \verb?{?, and \verb?}? have their
       usual meanings (i.e., \ltx\ commands are not disabled).
@@ -31797,6 +32692,11 @@
 \emph{style} and it provide several of these styles. This chapter is
 used to showcase these styles.
 
+
+\begingroup
+% because of hyperref warnings
+
+
 \section{Chapter styles}
 \label{sec:chapter-styles}
 
@@ -32105,6 +33005,8 @@
 
 \index{chapterstyle|)}
 
+\endgroup
+
 
 %#% extend
 %#% extstart include sniplets.tex
@@ -37770,9 +38672,9 @@
 
 \svnidlong
 {$Ignore: $}
-{$LastChangedDate: 2013-05-15 17:07:24 +0200 (Wed, 15 May 2013) $}
-{$LastChangedRevision: 463 $}
-{$LastChangedBy: daleif $}
+{$LastChangedDate: 2019-11-14 18:06:44 +0100 (Thu, 14 Nov 2019) $}
+{$LastChangedRevision: 662 $}
+{$LastChangedBy: daleif@math.au.dk $}
 
 \chapter{Comments}
 \label{cha:comments}
@@ -37784,7 +38686,8 @@
 algorithms for some of the macros in the class. The information may be
 useful to some.
 
-\subsection{Autoadjusting \cs{marginparwidth}}
+\subsection{Autoadjusting
+  \texorpdfstring{\cs{marginparwidth}}{\textbackslash marginparwidth}}
 \label{sec:auto-csmarg}
 
 This algorithm is used within \cmd{\fixthelayout} unless the user have
@@ -37795,19 +38698,19 @@
   \vskip-2\baselineskip
   \begin{small}
 \begin{verbatim}
-if twocolumn then
+if twocolumn then:
   marginparwidth = min{inner margin,outer margin}
 else
-  if twoside then
-    if marginpar always left or always right then
+  if twoside then:
+    if marginpar always left or always right then:
       marginparwidth = min{inner margin,outer margin}
-    else if marginpar in outer margin then
+    else if marginpar in outer margin then:
       marginparwidth = outer margin
-    else if marginpar in inner margin then
+    else if marginpar in inner margin then:
       marginparmargin = inner margin
     end if
   else
-    if marginpar in left margin then
+    if marginpar in left margin then:
       marginparwidth = inner margin
     else
       marginparwidth = outer margin
@@ -37815,7 +38718,7 @@
   end if
 end if
 marginparwidth = marginparwidth - 2marginparsep
-if marginparwidth < 1pt then
+if marginparwidth < 1pt then:
   marginparwidth = 1pt
 end if
 \end{verbatim}
@@ -37994,10 +38897,10 @@
 \end{comment}
 
 %%% keep
-\bibitem[Car94]{DELARRAY}
+\bibitem[Car14]{DELARRAY}
   David Carlisle.
   \newblock \emph{The delarray package}.
-  \newblock March, 1994.
+  \newblock October, 2014.
   \newblock (Available from CTAN via
              \CTANurl{/macros/latex/required/tools/})
 
@@ -38035,10 +38938,11 @@
 \end{comment}
 
 %%% keep
-\bibitem[Car99]{TABULARX}
+\LMnote{2018/09/06}{Updated year}
+\bibitem[Car16]{TABULARX}
   David Carlisle.
   \newblock \emph{The tabularx package}.
-  \newblock January, 1999.
+  \newblock February, 2016.
   \newblock (Available from CTAN via
              \CTANurl{/macros/latex/required/tools/})
 
@@ -38051,17 +38955,19 @@
              \CTANurl{/macros/latex/required/graphics/})
 
 %%% keep
-\bibitem[Car01]{DCOLUMN}
+\LMnote{2018/09/06}{updated year}             
+\bibitem[Car14]{DCOLUMN}
   David Carlisle.
   \newblock \emph{The dcolumn package}.
   \newblock May, 2001.
   \newblock (Available from CTAN via
              \CTANurl{/macros/latex/required/tools/})
 
-\bibitem[Car04]{textcase} % casing intentional
+\LMnote{2019/10/2}{Updated year}
+\bibitem[Car19]{textcase} % casing intentional
  David Carlisle.
 \newblock \emph{The \Lpack{textcase} package}.
-\newblock October, 2004.
+\newblock September, 2019.
 \newblock (Available from CTAN in 
       \texttt{/macros/latex/contrib/textcase})
 
@@ -38248,10 +39154,11 @@
 
 
 %%% keep
-\bibitem[Fea03]{BOOKTABS}
+\LMnote{2018/09/06}{Updated year}
+\bibitem[Fea16]{BOOKTABS}
   Simon Fear.
   \newblock \emph{Publication quality tables in LaTeX}.
-  \newblock March, 2003.
+  \newblock April, 2016.
   \newblock (Available from CTAN via
             \CTANurl{/macros/latex/contrib/booktabs})
 
@@ -38545,17 +39452,34 @@
 \end{comment}
 
 %%% keep
-\bibitem[Mit98]{MULTICOL}
+\bibitem[Mit18]{MULTICOL}
   Frank Mittelbach.
   \newblock \emph{An environment for multicolumn output}.
-  \newblock January, 1998.
+  \newblock April, 2018.
   \newblock (Available from CTAN (the \texttt{multicol} package) via 
             \CTANurl{/macros/latex/required/tools/})
 
-%%% keep
-\bibitem[MC98]{ARRAY}
+\bibitem[Mit2020a]{LTFILEHOOK}
+  Frank Mittelbach
+  \newblock \emph{The ltfilehook package}
+   \newblock July 2020. 
+
+ \bibitem[Mit2020b]{LTHOOKS}
+  Frank Mittelbach
+  \newblock \emph{The lthooks package}
+   \newblock July 2020. 
+
+ \bibitem[Mit2020c]{LTSHIPOUT}
+  Frank Mittelbach
+  \newblock \emph{The ltshipout package}
+   \newblock July 2020. 
+
+            
+%%keep
+\LMnote{2018/09/06}{Updated year}            
+\bibitem[MC18]{ARRAY}
   Frank Mittelbach and David Carlisle.
-  \newblock \emph{A new implementation of LaTeX's tabular and array environment}.  \newblock May, 1998.
+  \newblock \emph{A new implementation of LaTeX's tabular and array environment}.  \newblock May, 2018.
   \newblock (Available from CTAN (the \texttt{array} package) via
             \CTANurl{/macros/latex/required/tools/})
 
@@ -38563,7 +39487,9 @@
 \bibitem[MC00]{FIXLTX2E}
   Frank Mittelbach and David Carlisle.
   \newblock \emph{The fixltx2e package}.
-  \newblock September, 2000.
+  \newblock December, 2016.
+  \newblock As of 2015 the functionality of this package has been
+  merged with the \LaTeX{} kernel.
   \newblock (Available from CTAN via 
             \CTANurl{/macros/latex/base/})
 
@@ -39014,13 +39940,6 @@
             \url{/macros/latex/contrib/booklet})
 \end{comment}
 
-%%% keep
-\bibitem[Wil03a]{LAYOUTS}
-  Peter Wilson.
-  \newblock \emph{The layouts package}
-  \newblock November, 2003.
-  \newblock (Available from CTAN in 
-            \CTANurl{/macros/latex/contrib/layouts/})
 
 %%% keep
 \bibitem[Wil03b]{LEDMAC}
@@ -39055,6 +39974,13 @@
             \CTANurl{/macros/latex/contrib/pagenote/})
 
 
+%%% keep
+\bibitem[Wil04c]{LAYOUTS}
+  Peter Wilson.
+  \newblock \emph{The layouts package}
+  \newblock October, 2004.
+  \newblock (Available from CTAN in 
+            \CTANurl{/macros/latex/contrib/layouts/})
 
 
 %%% keep
@@ -39120,26 +40046,26 @@
   \newblock (Available from CTAN via 
             \CTANurl{/macros/latex/contrib/fonttable/})
 
-\bibitem[Wil09b]{MEMCODE}
+\bibitem[Wil19a]{MEMCODE}
 Peter Wilson (with the assistance of Lars Madsen).
   \newblock \emph{The \ltx\ memoir class for configurable book
     typesetting: source code} 
-  \newblock July, 2009.
+  \newblock November, 2019.
   \newblock (Available from CTAN via 
             \CTANurl{/macros/latex/contrib/memoir/})
 
-\bibitem[Wil07c]{MEMMAN}
+\bibitem[Wil19b]{MEMMAN}
 Peter Wilson (with the assistance of Lars Madsen).
   \newblock \emph{The Memoir Class for Configurable Typesetting ---
     User Guide} 
-  \newblock August, 2009. Regularly updated.
+  \newblock November, 2019. Regularly updated.
   \newblock (Available from CTAN via 
             \CTANurl{/macros/latex/contrib/memoir/})
 
-\bibitem[Wil09d]{MEMDESIGN}
+\bibitem[Wil18]{MEMDESIGN}
   Peter Wilson.
   \newblock \emph{A Few Notes on Book Design}
-  \newblock August, 2009.
+  \newblock September, 2018.
   \newblock (Available from CTAN via
             \CTANurl{/info/memdesign/})
 
@@ -39150,6 +40076,16 @@
 \newblock \emph{A Rumour of Humour: A scientist's commonplace book}.
 \newblock To be published.
 
+
+\bibitem[Wri19]{SIUNITX}
+  Joseph Wright.
+  \newblock \emph{Siunitx — A comprehensive (SI) units package}
+  \newblock October, 2019.
+  \newblock (Available from CTAN via \CTANurl{/macros/latex/contrib/siunitx})
+
+
+
+
 \begin{comment}
 \bibitem[Wis03]{WISHART03}
 David Wishart.
@@ -39206,7 +40142,26 @@
 \onecolindex
 \renewcommand*{\preindexhook}{}
 \renewcommand*{\indexname}{Index of first lines}
-%%%\indexintoc
+%%% \indexintoc
+
+
+\makeatletter
+\renewcommand{\doidxbookmark}[1]{{\def\@tempa{Symbols}\def\@tempb{#1}%
+  \centering\bfseries \ifx\@tempa\@tempb %
+  Analphabetics 
+%  \phantomsection%
+%  \pdfbookmark[0]{Analphabetics}{Analphabetics-idx}%
+%  \label{AnalphabeticsAnalphabeticsAnalphabetics-idx}%
+  \else 
+  #1%
+%  \phantomsection%
+%  \pdfbookmark[0]{#1}{#1-idx}%
+%  \label{#1#1#1-idx}%
+  \fi%
+  \vskip\onelineskip\par}}
+\makeatother
+
+
 \printindex[lines]
 
 \cleardoublepage
@@ -39228,8 +40183,13 @@
 
 \end{center}
 
+
 \end{adjustwidth}
 
+
+
+
+
 \vfil
 
 %#% extend
